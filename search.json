[{"path":"https://mini-pw.github.io/PvSTATEM/articles/example_script.html","id":"reading-the-plate-object","dir":"Articles","previous_headings":"","what":"Reading the plate object","title":"Basic PvSTATEM functionalities","text":"basic functionality PvSTATEM package reading raw MBA data. present package’s functionalities, use sample dataset Covid OISE study, pre-loaded package. might want replace variables paths files local disk. Firstly, let us load dataset plate object.","code":"library(PvSTATEM)  plate_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT.csv\", package = \"PvSTATEM\", mustWork = TRUE) # get the filepath of the csv dataset  layout_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT_layout.xlsx\", package = \"PvSTATEM\", mustWork = TRUE)   plate <- read_luminex_data(plate_filepath, layout_filepath) # read the data #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT! #> plate #> Plate with 96 samples and 30 analytes"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/example_script.html","id":"processing-the-whole-plate","dir":"Articles","previous_headings":"","what":"Processing the whole plate","title":"Basic PvSTATEM functionalities","text":"loaded plate object, may process using function process_plate. function fits model analyte using standard curve samples. computes RAU values analyte using corresponding model. computed RAU values saved CSV file specified folder, specified name, default based plate name normalisation type - function also allows normalisation nMFI values, details method may found nMFI section document, documentation ?get_nmfi function. get information function, check ?process_plate. can take look slice produced dataframe (overcrowd article).","code":"example_dir <- tempdir(check = TRUE) # create a temporary directory to store the output df <- process_plate(plate, output_dir = example_dir) #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/tmp/RtmpXz32uA/CovidOISExPONTENT_RAU.csv' colnames(df) #>  [1] \"Spike_6P\"          \"ME\"                \"HKU1_S\"            #>  [4] \"OC43_NP\"           \"OC43_S\"            \"HKU1_NP\"           #>  [7] \"X229E_NP\"          \"Mumps_NP\"          \"RBD_B16171\"        #> [10] \"NL63_NP\"           \"RBD_B16172\"        \"RBD_wuhan\"         #> [13] \"NL63_S\"            \"X229E_S\"           \"Spike_B16172\"      #> [16] \"Spike_B117\"        \"Measles_NP\"        \"Ade5\"              #> [19] \"NP\"                \"Spike_P1\"          \"Rub\"               #> [22] \"Ade40\"             \"RBD_B117\"          \"Spike_B1351\"       #> [25] \"FluA\"              \"RBD_B1351\"         \"RBD_P15\"           #> [28] \"S2\"                \"Spike_omicron\"     \"RBD_omicron\"       #> [31] \"Spike_6P_raw\"      \"ME_raw\"            \"HKU1_S_raw\"        #> [34] \"OC43_NP_raw\"       \"OC43_S_raw\"        \"HKU1_NP_raw\"       #> [37] \"X229E_NP_raw\"      \"Mumps_NP_raw\"      \"RBD_B16171_raw\"    #> [40] \"NL63_NP_raw\"       \"RBD_B16172_raw\"    \"RBD_wuhan_raw\"     #> [43] \"NL63_S_raw\"        \"X229E_S_raw\"       \"Spike_B16172_raw\"  #> [46] \"Spike_B117_raw\"    \"Measles_NP_raw\"    \"Ade5_raw\"          #> [49] \"NP_raw\"            \"Spike_P1_raw\"      \"Rub_raw\"           #> [52] \"Ade40_raw\"         \"RBD_B117_raw\"      \"Spike_B1351_raw\"   #> [55] \"FluA_raw\"          \"RBD_B1351_raw\"     \"RBD_P15_raw\"       #> [58] \"S2_raw\"            \"Spike_omicron_raw\" \"RBD_omicron_raw\" df[1:5, 1:5] #>                Spike_6P        ME     HKU1_S   OC43_NP     OC43_S #> CO-F-226-01-CF 20000.00  5768.628   829.2993 4289.2647  6871.6113 #> CO-F-263-02-KC 20000.00  4050.148  8128.2569 3681.9063  8828.6351 #> CO-F-080-02-TV 20000.00  5889.229 15877.9572 1473.4541 11012.7498 #> CO-F-215-01-BA 20000.00 10446.952  6069.3115  828.9687  1116.0059 #> CO-H-SD-039-BC 17665.36  2656.989  4055.8890  990.4044   670.7302"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/example_script.html","id":"quality-control-and-normalisation-details","dir":"Articles","previous_headings":"","what":"Quality control and normalisation details","title":"Basic PvSTATEM functionalities","text":"Apart process_plate function, package provides set methods allowing detailed advanced quality control normalisation data.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/articles/example_script.html","id":"plate-summary-and-details","dir":"Articles","previous_headings":"Quality control and normalisation details","what":"Plate summary and details","title":"Basic PvSTATEM functionalities","text":"plate successfully loaded, can look basic information . summary can also accessed using built-generic method summary.","code":"plate$summary() #> Summary of the plate with name 'CovidOISExPONTENT': #> Plate examination date: 2022-05-11 16:45:00 #> Total number of samples: 96 #> Number of blank samples: 1 #> Number of standard curve samples: 11 #> Number of positive control samples: 0 #> Number of negative control samples: 0 #> Number of test samples: 84 #> Number of analytes: 30 plate$summary(include_names = TRUE) # more detailed summary #> Summary of the plate with name 'CovidOISExPONTENT': #> Plate examination date: 2022-05-11 16:45:00 #> Total number of samples: 96 #> Number of blank samples: 1 #> Number of standard curve samples: 11 #> Sample names: '1/50', '1/100', '1/200', '1/400', '1/800', '1/1600', '1/3200', '1/6400', '1/12800', '1/25600', '1/102400' #> Number of positive control samples: 0 #> Number of negative control samples: 0 #> Number of test samples: 84 #> Number of analytes: 30 plate$sample_names #>  [1] \"B\"              \"1/50\"           \"1/100\"          \"1/200\"          #>  [5] \"1/400\"          \"1/800\"          \"1/1600\"         \"1/3200\"         #>  [9] \"1/6400\"         \"1/12800\"        \"1/25600\"        \"1/102400\"       #> [13] \"CO-F-226-01-CF\" \"CO-F-263-02-KC\" \"CO-F-080-02-TV\" \"CO-F-215-01-BA\" #> [17] \"CO-H-SD-039-BC\" \"CO-H-RD-053-MO\" \"CO-F-030-01-LA\" \"CO-F-204-01-TC\" #> [21] \"CO-F-009-01-CS\" \"CO-F-156-02-GB\" \"CO-F-402-03-DE\" \"CO-H-SK-021-BC\" #> [25] \"CO-F-226-02-CM\" \"CO-F-266-01-LC\" \"CO-F-080-03-TA\" \"CO-F-215-02-BN\" #> [29] \"CO-H-SD-042-DD\" \"CO-H-RK-002-BA\" \"CO-F-031-01-LD\" \"CO-F-204-02-TT\" #> [33] \"CO-F-021-03-DF\" \"CO-F-156-03-GN\" \"CO-F-402-04-DR\" \"CO-H-SK-023-DC\" #> [37] \"CO-F-226-03-CG\" \"CO-F-272-01-DF\" \"CO-F-080-04-TM\" \"CO-F-215-03-BA\" #> [41] \"CO-H-SK-004-GA\" \"CO-H-RK-004-WN\" \"CO-F-112-01-CN\" \"CO-F-220-01-VV\" #> [45] \"CO-F-028-01-PJ\" \"CO-F-214-01-SP\" \"CO-F-402-05-DS\" \"CO-H-SK-029-LC\" #> [49] \"CO-F-234-01-LC\" \"CO-F-310-01-DC\" \"CO-F-082-01-OF\" \"CO-F-299-01-CS\" #> [53] \"CO-H-SK-006-MS\" \"CO-H-RK-007-CJ\" \"CO-F-180-01-PN\" \"CO-F-243-01-BL\" #> [57] \"CO-F-124-01-SV\" \"CO-F-237-01-LE\" \"CO-H-SD-002-WL\" \"CO-H-SK-030-MJ\" #> [61] \"CO-F-234-02-LS\" \"CO-F-311-01-PC\" \"CO-F-089-01-DP\" \"CO-F-325-01-LN\" #> [65] \"CO-H-SK-011-CC\" \"CO-H-RK-009-MB\" \"CO-F-180-02-DM\" \"CO-F-243-02-SH\" #> [69] \"CO-F-134-01-MK\" \"CO-F-281-01-BV\" \"CO-H-SD-013-LV\" \"CO-H-SK-031-CP\" #> [73] \"CO-F-260-01-GD\" \"CO-F-075-01-BA\" \"CO-F-089-02-DC\" \"CO-H-SD-004-CG\" #> [77] \"CO-H-SK-051-DA\" \"CO-H-RK-010-VP\" \"CO-F-180-03-DR\" \"CO-F-276-01-ME\" #> [81] \"CO-F-134-02-GM\" \"CO-F-402-01-BH\" \"CO-H-SD-043-BS\" \"CO-H-SK-039-AA\" #> [85] \"CO-F-260-02-GC\" \"CO-F-075-02-FM\" \"CO-F-139-01-BP\" \"CO-H-SD-021-PC\" #> [89] \"CO-H-SK-056-MN\" \"CO-F-027-02-SL\" \"CO-F-180-04-DC\" \"CO-F-027-01-SF\" #> [93] \"CO-F-156-01-GA\" \"CO-F-402-02-DV\" \"CO-H-SK-018-VC\" \"CO-F-045-01-SN\" plate$analyte_names #>  [1] \"Spike_6P\"      \"ME\"            \"HKU1_S\"        \"OC43_NP\"       #>  [5] \"OC43_S\"        \"HKU1_NP\"       \"X229E_NP\"      \"Mumps_NP\"      #>  [9] \"RBD_B16171\"    \"NL63_NP\"       \"RBD_B16172\"    \"RBD_wuhan\"     #> [13] \"NL63_S\"        \"X229E_S\"       \"Spike_B16172\"  \"Spike_B117\"    #> [17] \"Measles_NP\"    \"Ade5\"          \"NP\"            \"Spike_P1\"      #> [21] \"Rub\"           \"Ade40\"         \"RBD_B117\"      \"Spike_B1351\"   #> [25] \"FluA\"          \"RBD_B1351\"     \"RBD_P15\"       \"S2\"            #> [29] \"Spike_omicron\" \"RBD_omicron\" summary(plate) #> Summary of the plate with name 'CovidOISExPONTENT': #> Plate examination date: 2022-05-11 16:45:00 #> Total number of samples: 96 #> Number of blank samples: 1 #> Number of standard curve samples: 11 #> Number of positive control samples: 0 #> Number of negative control samples: 0 #> Number of test samples: 84 #> Number of analytes: 30"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/example_script.html","id":"quality-control","dir":"Articles","previous_headings":"Quality control and normalisation details","what":"Quality control","title":"Basic PvSTATEM functionalities","text":"package can plot RAU along MFI values, allowing manual inspection standard curve. method raises warning case MFI values adjusted using blank samples.   can also plot standard curve different analytes data types. list available analytes plate can accessed using command plate$analyte_names. default, operations performed Median value samples; option can selected data_type parameter function.   plot may used assess standard curve’s quality anticipate potential issues data. instance, plotted standard curve analyte, , notice Median value sample RAU 39.06 abnormally large, may indicate problem data.   plotting function options, selecting axis log scale applied reversing curve. detailed information can found function documentation, accessed executing command ?plot_standard_curve_analyte. Another valuable method inspecting potential errors data plot_mfi_for_analyte. method plots MFI values standard curve samples given analyte along boxplot MFI values test samples. helps identify outlier samples check test samples within range standard curve samples.   Spike_6P analyte, MFI values don’t fall within range standard curve samples, problematic model. test RAU values extrapolated (point) standard curve, may lead incorrect results.","code":"plot_standard_curve_analyte(plate, analyte_name = \"OC43_S\") plate$blank_adjustment() #> Plate with 96 samples and 30 analytes print(plate$blank_adjusted) #> [1] TRUE plot_standard_curve_analyte(plate, analyte_name = \"OC43_S\") plot_standard_curve_analyte(plate, analyte_name = \"RBD_wuhan\", data_type = \"Mean\") plot_standard_curve_analyte(plate, analyte_name = \"RBD_wuhan\", data_type = \"Avg Net MFI\") plot_standard_curve_analyte(plate, analyte_name = \"ME\") plot_standard_curve_analyte(plate, analyte_name = \"ME\", log_scale = \"all\") plot_mfi_for_analyte(plate, analyte_name = \"OC43_S\") plot_mfi_for_analyte(plate, analyte_name = \"Spike_6P\")"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/example_script.html","id":"normalisation","dir":"Articles","previous_headings":"Quality control and normalisation details","what":"Normalisation","title":"Basic PvSTATEM functionalities","text":"inspection, may create model standard curve specific antibody. model fitted using nplr package, provides simple interface fitting n-parameter logistic regression models. Still, create straightforward interface user, encapsulated model class called Model simplicity. detailed documentation Model class can found executing command ?Model. model used predict RAU values samples based MFI values.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/articles/example_script.html","id":"rau-vs-dilution","dir":"Articles","previous_headings":"Quality control and normalisation details > Normalisation","what":"RAU vs dilution","title":"Basic PvSTATEM functionalities","text":"distinguish actual dilution values (ones known standard curve samples) dilution predictions (obtained using fitted standard curve), introduced package unit called RAU (Relative Antibody Unit) equal dilution prediction multiplied 1,000,0001,000,000 provide readable value.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/articles/example_script.html","id":"inner-nplr-model","dir":"Articles","previous_headings":"Quality control and normalisation details > Normalisation","what":"Inner nplr model","title":"Basic PvSTATEM functionalities","text":"nplr package fits model using formula: y=B+T−B[1+10b⋅(xmid−x)]s, y = B + \\frac{T - B}{[1 + 10^{b \\cdot (x_{mid} - x)}]^s}, : yy predicted value, MFI case, xx independent variable, dilution standard curve samples case, BB bottom plateau - right horizontal asymptote, TT top plateau - left horizontal asymptote, bb slope curve inflection point, xmidx_{mid} x-coordinate inflection point, ss asymmetric coefficient. equation referred Richards’ equation. information model can found nplr package documentation.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/articles/example_script.html","id":"predicting-rau","dir":"Articles","previous_headings":"Quality control and normalisation details > Normalisation","what":"Predicting RAU","title":"Basic PvSTATEM functionalities","text":"reversing logistic function, can predict dilution samples based MFI values. RAU value predicted dilution sample multiplied 1,000,0001,000,000. limit extrapolation error (values maximum RAU value standard curve samples), clip predictions MM over_max_extrapolation user controlled parameter predict function. default over_max_extrapolation set 00.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/articles/example_script.html","id":"usage","dir":"Articles","previous_headings":"Quality control and normalisation details > Normalisation","what":"Usage","title":"Basic PvSTATEM functionalities","text":"default, nplr model transforms x values using log10 function. create model specific analyte, use create_standard_curve_model_analyte function, fits returns model analyte. Since model object contains characteristics parameters fitted regression model. model can used predict RAU values samples based MFI values. output shows critical parameters fitted model. predicted values may used plot standard curve, can compared sample values.   Apart plotting, package can predict values samples plate. dataframe contains original MFI values predicted RAU values based model. order allow extrapolation (certain value) can set over_max_extrapolation positive value. illustrate can look prediction plots. plot_standard_curve_analyte_with_model takes additional parameters passes predict method can visually see effect over_max_extrapolation parameter.","code":"model <- create_standard_curve_model_analyte(plate, analyte_name = \"OC43_S\")  model #> Instance of the Model class fitted for analyte ' OC43_S ':  #>  - fitted with 5 parameters #>  - using 11 samples #>  - using log residuals (mfi):  TRUE  #>  - using log dilution:  TRUE  #>  - top asymptote: 28414.96  #>  - bottom asymptote: 38.60885  #>  - goodness of fit: 0.9970645  #>  - weighted goodness of fit: 0.9998947 plot_standard_curve_analyte_with_model(plate, model, log_scale = c(\"all\")) plot_standard_curve_analyte_with_model(plate, model, log_scale = c(\"all\"), plot_asymptote = FALSE) mfi_values <- plate$data$Median$OC43_S head(mfi_values) #> [1]   43.0 4193.0 1982.0 1308.0  681.0  365.5 predicted_rau <- predict(model, mfi_values)  head(predicted_rau) #>            RAU    MFI #> 1     2.375258   43.0 #> 2 20000.000000 4193.0 #> 3  8326.658518 1982.0 #> 4  5240.371360 1308.0 #> 5  2556.577252  681.0 #> 6  1242.668884  365.5 model <- create_standard_curve_model_analyte(plate, analyte_name = \"Spike_6P\") plot_standard_curve_analyte_with_model(plate, model, log_scale = c(\"all\")) plot_standard_curve_analyte_with_model(plate, model, log_scale = c(\"all\"), over_max_extrapolation = 100000)"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/example_script.html","id":"nmfi","dir":"Articles","previous_headings":"Quality control and normalisation details","what":"nMFI","title":"Basic PvSTATEM functionalities","text":"cases, RAU values reliably calculated. may happen MFI values test samples way higher standard curve samples. case, avoid extrapolation still able compare samples across plates, introduced new unit called nMFI (Normalized MFI). nMFI calculated MFI value test sample divided MFI value standard curve sample selected dilution value. nMFI values samples can calculated two ways - using get_nmfi function process_plate function also saves output CSV file setting normalisation_type parameter nMFI process_plate function. default output saved file name plate name _nMFI suffix.","code":"nmfi_values <- get_nmfi(plate)  # process plate with nMFI normalisation  df <- process_plate(plate, output_dir = example_dir, normalisation_type = \"nMFI\") #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/tmp/RtmpXz32uA/CovidOISExPONTENT_nMFI.csv' df[1:5, 1:5] #>                Spike_6P       ME    HKU1_S   OC43_NP    OC43_S #> CO-F-226-01-CF 5.842408 1.988889 0.3821903 1.5449180 2.4537445 #> CO-F-263-02-KC 7.171064 1.471111 2.6996681 1.3481967 3.0638767 #> CO-F-080-02-TV 7.169239 2.024444 4.6227876 0.6085246 3.7077827 #> CO-F-215-01-BA 7.586304 3.288889 2.1028761 0.3816393 0.4919236 #> CO-H-SD-039-BC 3.695481 1.037778 1.4778761 0.4393443 0.3340675"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_datasets.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Our datasets","text":"package’s main purpose read, perform quality control, normalise raw MBA data. Unfortunately, different devices labs different data formats. gathered datasets package tested. document describes datasets sources. majority datasets, available public, stored extdata folder package. remaining private significant number publicly available datasets stored OneDrive folder, accessible package developers.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_datasets.html","id":"how-to-access-the-files","dir":"Articles","previous_headings":"Introduction","what":"How to access the files","title":"Our datasets","text":"simple way accessing files download GitHub repository. Another way source files using system.file function. function returns path file, can used read data. function following syntax: variable dataset_filepath now contains path specified dataset computer. Since know filepath desired dataset, can execute read_data function read data. function following syntax:","code":"dataset_name <- \"CovidOISExPONTENT.csv\"  dataset_filepath <- system.file(\"extdata\", dataset_name, package = \"PvSTATEM\", mustWork = TRUE) library(PvSTATEM)  plate <- read_luminex_data(dataset_filepath) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT.csv #> using format xPONENT #> (WARNING) #> Layout file not provided. Setting `use_layout_sample_names`, #>       `use_layout_types` and `use_layout_dilutions` to FALSE. #> (WARNING) #> All dilutions in the plate are set to NA. Please check the dilutions in the layout file or sample names. #> New plate object has been created with name: CovidOISExPONTENT! #> plate #> Plate with 96 samples and 30 analytes"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_datasets.html","id":"description-of-the-datasets","dir":"Articles","previous_headings":"Introduction","what":"Description of the datasets","title":"Our datasets","text":"datasets divided three main categories: artificial - ones created us test package functionalities public - publicly available datasets produced scope PvSTATEM project laboratories participating project. external - ones gathered public domain, external sources, independent PvSTATEM project","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_datasets.html","id":"artificial-datasets","dir":"Articles","previous_headings":"Introduction > Description of the datasets","what":"Artificial datasets","title":"Our datasets","text":"perform simple unit tests validate basic reading functionalities package, created artificial datasets. datasets stored package’s extdata folder. datasets : random.csv - simple dataset random values used test basic functionalities package random2.csv - another simple dataset random values used test basic functionalities package. file corresponding, artificial layout - random_layout.csv random_broken_colB.csv - dataset broken column, detected package reported warning","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_datasets.html","id":"public-datasets","dir":"Articles","previous_headings":"Introduction > Description of the datasets","what":"Public datasets","title":"Our datasets","text":"datasets category important package development since package’s primary purpose simplify preprocessing data scope PvSTATEM project. stored package’s OneDrive folder. datasets available extdata folder two files coming Covid oise examination: CovidOISExPONTENT.csv, IG4DC2~1.csv plate examination IgG_CovidOise4_30plex. contains corresponding layout file CovidOISExPONTENT_layout.xlsx CovidOISExPONTENT_CO.csv, IGG_CO~1.csv plate examination IgG_CovidOise2_30plex corresponding layout file examples vignettes package based datasets.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_datasets.html","id":"external-datasets","dir":"Articles","previous_headings":"Introduction > Description of the datasets","what":"External datasets","title":"Our datasets","text":"gathered datasets public domain check package functionalities data different sources. datasets also stored package OneDrive folder subfolder external extdata directory. datasets : Chul_IgG3_1.csv - GitHub repo RTSS_Kisumu_Schisto source Chul_TotalIgG_2.csv - GitHub repo RTSS_Kisumu_Schisto source pone.0187901.s001.csv - data shipped drLumi package source New_Batch_6_20160309_174224.csv - dataset included paper single-nucleotide-polymorphism-based genotyping assay simultaneous detection different carbendazim-resistant genotypes Fusarium graminearum species complex, H. Zhang et. al.  New_Batch_14_20140513_082522.csv - dataset included paper single-nucleotide-polymorphism-based genotyping assay simultaneous detection different carbendazim-resistant genotypes Fusarium graminearum species complex, H. Zhang et. al. ","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_plots.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to plots created by our package","text":"PvSTATEM package provides variety plots can used visualize Luminex data. vignette, show use . present package’s functionalities, use sample dataset Covid OISE study, pre-loaded package. Firstly, let us load dataset plate object.","code":"library(PvSTATEM)  plate_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT.csv\", package = \"PvSTATEM\", mustWork = TRUE) # get the filepath of the csv dataset  layout_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT_layout.xlsx\", package = \"PvSTATEM\", mustWork = TRUE)   plate <- read_luminex_data(plate_filepath, layout_filepath) # read the data #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT! #> plate #> Plate with 96 samples and 30 analytes"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_plots.html","id":"plate-layout","dir":"Articles","previous_headings":"","what":"Plate layout","title":"Introduction to plots created by our package","text":"omit validation functionality vignette focus plots. successfully loading plate, validate looking basic information using summary function. However, can obtain similar information visually using plot_layout function. helps quickly asses whether layout plate correctly read Luminex layout file. function takes plate object argument.  plot shows layout plate. wells coloured according type sample. user familiar colour scheme package, option turn legend. can done setting show_legend parameter FALSE. plot window resized, recommended function rerun adjust scaling plot. Sometimes, whole layout may shifted legend plotted. solve issue, one stretch window toward layout shift, everything adjusted automatically.","code":"plot_layout(plate)"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_plots.html","id":"counts-for-a-given-analyte","dir":"Articles","previous_headings":"","what":"Counts for a given analyte","title":"Introduction to plots created by our package","text":"plot_counts function allows us visualize counts analyte plate. plot useful quickly spotting wells count low interpret results high confidence. function takes plate object analyte name arguments. function return error message typo analyte name.  plot shows analyte “OC43_NP_NA” counts plate. wells coloured according count analyte. -low values marked red, values edge threshold marked yellow, rest marked green. option show legend setting show_legend parameter TRUE. also option show colours without counts setting show_counts parameter FALSE. provides cleaner plot without counts.","code":"plot_counts(plate, \"Spike_B16172\") plot_counts(plate, \"FluA\", plot_counts = FALSE)"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_plots.html","id":"distribution-of-mfi-values","dir":"Articles","previous_headings":"","what":"Distribution of MFI values","title":"Introduction to plots created by our package","text":"plot_mfi_distribution function allows us visualize distribution MFI values test samples given analyte. compare standard curve samples given plate. plot helpful asses standard curve samples cover whole range MFI test samples. function takes plate object analyte name arguments. function return error message typo analyte name.  plot shows distribution MFI values test samples analyte “OC43_NP_NA”. test samples coloured blue, standard curve samples coloured red. default plot type violin, option change boxplot setting plot_type parameter boxplot.  Additionally, can modify scale y-axis setting scale_y desired transformation ggplot2 package. case boxplot type plot, may include outliers plot_outliers parameter.","code":"plot_mfi_for_analyte(plate, \"Spike_B16172\") plot_mfi_for_analyte(plate, \"FluA\", plot_type = \"boxplot\") plot_mfi_for_analyte(plate, \"FluA\", plot_type = \"boxplot\", scale_y = \"identity\", plot_outliers = TRUE)"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_plots.html","id":"standard-curve-plots","dir":"Articles","previous_headings":"","what":"Standard curve plots","title":"Introduction to plots created by our package","text":"Finally, arrive crucial visualization package - standard curve-related plots. plots help assess quality fit, crucial us next step package development. comes two flavors: plot_standard_curve_analyte plot_standard_curve_analyte_with_model. first incorporate model, second .","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_plots.html","id":"standard-curve-plot-without-model","dir":"Articles","previous_headings":"Standard curve plots","what":"Standard curve plot without model","title":"Introduction to plots created by our package","text":"plot used assess quality assay. anything goes wrong plate preparation, visible easily plot.  , see default plot analyte “Spike_B16172”. can modify plot setting parameters function. example, can change direction x-axis setting decreasing_rau_order parameter FALSE. parameters worth mentioning log_scale, default value c(\"\"), means x y axes log scale. parameters worth mentioning log_scale, default value c(\"\"), means x y axes log scale. also option turn parts plot setting parameters plot_line, plot_blank_mean plot_rau_bounds FALSE. first disables drawing line standard curve points, second turns plotting mean blank samples, last disables plotting RAU value bounds.","code":"plot_standard_curve_analyte(plate, \"Spike_B16172\")"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_plots.html","id":"standard-curve-plot-with-model","dir":"Articles","previous_headings":"Standard curve plots","what":"Standard curve plot with model","title":"Introduction to plots created by our package","text":"visualization similar previous one also incorporates model. Thus, carries information cost complex crowded.  , specify analyte name, model already carries information. model created create_standard_curve_model_analyte function, takes plate object analyte name arguments, focus vignette. arguments function similar previous one, except missing plot_line argument, two new arguments: plot_asymptote plot_test_predictions. first turns asymptotes, second disables plotting test samples’ predictions. default, set TRUE.","code":"model <- create_standard_curve_model_analyte(plate, analyte_name = \"Spike_B16172\") plot_standard_curve_analyte_with_model(plate, model)"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_plots.html","id":"standard-curve-plot-stacked","dir":"Articles","previous_headings":"Standard curve plots","what":"Standard curve plot stacked","title":"Introduction to plots created by our package","text":"another quality control measure, detects either plates inconsistent results deterioration calibration time can use plot_standard_curve_stacked function. function plots standard curves plot given analyte, allows us compare easily. order run function, need provide list_of_plates list plate objects analyte name arguments.  can pass function parameters found standard curve plots, like log_scale, decreasing_rau_order, data_type one additional parameter want focus . Parameter called monochromatic default value TRUE. results plots different shades blue plate. recent plates darker older ones almost white. helps quickly visualize drift calibration equipment time. monochromatic parameter set FALSE, variety colours plates, can useful comparing many plates. plate distinct others, can helpful looking outliers.  one useful parameter function mainly legend_type'. default set toNULLwhich means legend type determined based themonochromaticvalue. Ifmonochromaticis equal toTRUEthen legend type set todate, isFALSEthen legend type set toplate_name. User can override behavior setting explicitlylegend_typetodateorplate_name`.","code":"dir_with_luminex_files <- system.file(\"extdata\", \"multiplate_reallife_reduced\",   package = \"PvSTATEM\", mustWork = TRUE ) list_of_plates <- process_dir(dir_with_luminex_files,   return_plates = TRUE, format = \"xPONENT\" ) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_1_xponent.csv #> using format xPONENT #>  #> New plate object has been created with name: IGG_CO_1_xponent! #>  #> Processing plate 'IGG_CO_1_xponent' #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_1_xponent_RAU.csv' #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_1_xponent_nMFI.csv' #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_2_xponent.csv #> using format xPONENT #>  #> New plate object has been created with name: IGG_CO_2_xponent! #>  #> Processing plate 'IGG_CO_2_xponent' #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_2_xponent_RAU.csv' #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_2_xponent_nMFI.csv' #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_3_xponent.csv #> using format xPONENT #>  #> New plate object has been created with name: IGG_CO_3_xponent! #>  #> Processing plate 'IGG_CO_3_xponent' #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_3_xponent_RAU.csv' #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_3_xponent_nMFI.csv' plot_standard_curve_stacked(list_of_plates, \"ME\") plot_standard_curve_stacked(list_of_plates, \"ME\", monochromatic = FALSE)"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_plots.html","id":"levey-jennings-plot","dir":"Articles","previous_headings":"","what":"Levey-Jennings plot","title":"Introduction to plots created by our package","text":"plot_levey_jennings function allows us visualize Levey-Jennings plot given analyte. plot useful spotting trends data, shifts drifts data. function takes list_of_plates analyte_name mandatory arguments. list_of_plates can obtained process_dir function, reads plates directory, recommended way creating list plates.  plot shows Levey-Jennings plot analyte “” samples dilution “1/100”. default value dilution “1/400”. sd_lines parameter allows us set distance horizontal lines mean. example, sd_lines = c(1, 2) plot four lines +/- 1SD +/- 2SD, SD standard deviation data. default value sd_lines parameter c(1.96), ","code":"list_of_plates <- rep(list_of_plates, 10) # since we have only 3 plates i will repeat them 10 times to show the plot plot_levey_jennings(list_of_plates, \"ME\", dilution = \"1/100\", sd_lines = c(1, 2, 3))"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_reports.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Overview of reports generated by PvSTATEM package","text":"PvSTATEM package provides, now, one report can generated using generate_plate_report function. HTML report contains summary plate. optimized size sent via email. future, plan add package report Levey-Jennings plots. now, focus plate summary report. present functionality, use sample dataset Covid OISE study, pre-loaded package. Firstly, let us load dataset plate object.","code":"library(PvSTATEM)  plate_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT.csv\", package = \"PvSTATEM\", mustWork = TRUE) layout_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT_layout.xlsx\", package = \"PvSTATEM\", mustWork = TRUE) plate <- read_luminex_data(plate_filepath, layout_filepath) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT! #> plate #> Plate with 96 samples and 30 analytes"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_reports.html","id":"generating-the-report","dir":"Articles","previous_headings":"","what":"Generating the report","title":"Overview of reports generated by PvSTATEM package","text":"generate report, need use generate_plate_report function. one parameter needs set, plate object. Generation report takes seconds, please patient. can take minute large plate. Default report 4 main sections: important information plate  layout plate  preview standard curves  Detailed information analytes: section tabs analyte, user can select analyte interest.","code":"generate_plate_report(plate)"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/our_reports.html","id":"additional-parameters","dir":"Articles","previous_headings":"","what":"Additional parameters","title":"Overview of reports generated by PvSTATEM package","text":"user can customize report setting additional parameters. generate_plate_report function following optional parameters: additonal_notes - string additional notes added report notes looks like report:  counts_lower_threshold - lower threshold counts plot, works way plot_counts function used change threshold green yellow colours counts_higher_threshold - higher threshold counts plot, works way plot_counts function used change threshold yellow red colours filename - name output HTML report file. provided equals NULL, output filename based plate name, precisely: {plate_name}_report.html. default plate_name filename input file contains plate data. details, please refer documentation Plate object. passed filename contain .html extension, default extension .html added. Filename can also path file, e.g. path//file.html. case, output_dir filename joined together. However, passed filepath absolute path output_dir parameter also provided, output_dir parameter ignored. file already exists specified filepath, function overwrite . output_dir - directory output CSV file saved. Please note directory path provided create necessary directories (including parent directories) exist. equals NULL current working directory used. Default ‘reports’.","code":"notes <- \" This is an example of additional notes that can be added to the report. The notes support markdown syntax, for example: **Author: Jane Doe** - bold *Date: 2024-10-28* - italic ~~Complited~~ - strikethrough H~2~O - subscripts X^2^ - superscripts [text that will be displayed](https://www.google.com) - link to resource  Ordered list: 1. First item 2. Second item 3. Third item  Unordered list: - First item - Second item - Third item  > This is a blockquote  #### This is a heading ##### This is a subheading ###### This is a subsubheading  Even though headings #, ##, ### are supported, it is recommended not to use them, as the report has its own structure that is built around ### headings. \" generate_plate_report(plate, additional_notes = notes) generate_plate_report(plate,   additional_notes = notes,   counts_lower_threshold = 10,   counts_higher_threshold = 100,   filename = \"example_report.html\",   output_dir = \"reports_from_new_plates\" )"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/parsers.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Raw data parsers","text":"package primarily aims read, perform quality control, normalise raw MBA data. entire package made user-friendly possible, code, read data xPONENT INTELLIFLEX file using read_luminex_data function interacting created Plate object. hood, read_luminex_data function uses specific function read data given format later standardises output finally create Plate object. article go deeper details data parsers, illustrate reading system works show use even outside PvSTATEM package.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/articles/parsers.html","id":"basic-data-loading","dir":"Articles","previous_headings":"","what":"Basic data loading","title":"Raw data parsers","text":"simplest way loading file use read_luminex_data function default values. function many parameters can used customise reading process. example, can change data type want find file. default, datatype looking Median MFI value. default value can changed, e.g. Mean value, illustrated . way, provide flexibility user. complete list parameters description, please refer read_luminex_data documentation.","code":"library(PvSTATEM)  plate_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT.csv\", package = \"PvSTATEM\", mustWork = TRUE) layout_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT_layout.xlsx\", package = \"PvSTATEM\", mustWork = TRUE) plate <- read_luminex_data(plate_filepath, layout_filepath) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT! #> summary(plate) #> Summary of the plate with name 'CovidOISExPONTENT': #> Plate examination date: 2022-05-11 16:45:00 #> Total number of samples: 96 #> Number of blank samples: 1 #> Number of standard curve samples: 11 #> Number of positive control samples: 0 #> Number of negative control samples: 0 #> Number of test samples: 84 #> Number of analytes: 30 # display a sample of the dataframe data.frame(plate)[c(1, 2), c(1, 2)] #>   Spike_6P   ME #> 1       24   33 #> 2    14256 1263 plate <- read_luminex_data(plate_filepath, layout_filepath, default_data_type = \"Mean\") #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT! #> summary(plate) #> Summary of the plate with name 'CovidOISExPONTENT': #> Plate examination date: 2022-05-11 16:45:00 #> Total number of samples: 96 #> Number of blank samples: 1 #> Number of standard curve samples: 11 #> Number of positive control samples: 0 #> Number of negative control samples: 0 #> Number of test samples: 84 #> Number of analytes: 30 # display a sample of the dataframe data.frame(plate)[c(1, 2), c(1, 2)] #>   Spike_6P      ME #> 1    25.13   32.29 #> 2 13681.42 1352.75"},{"path":"https://mini-pw.github.io/PvSTATEM/articles/parsers.html","id":"pvstatem-as-an-mba-data-reader","dir":"Articles","previous_headings":"","what":"PvSTATEM as an MBA data reader","title":"Raw data parsers","text":"read_luminex_data function enforces additional constraints raw MBA data, sample names following specific pattern correctly classified. data follow standards still want use parsers, can directly use format-specific functions : - read_xponent_format - read_intelliflex_format example, let us read xPONENT file using read_xponent_format. can see now output function nested list containing information parsed file. structure output may different across formats, recommended way read data, package open enough allow .","code":"output <- read_xponent_format(plate_filepath) typeof(output) #> [1] \"list\" names(output) #> [1] \"ProgramMetadata\" \"Header\"          \"Samples\"         \"Min Events\"      #> [5] \"Per Bead\"        \"Results\"         \"CRC32\" output[[\"ProgramMetadata\"]] #> $Program #> [1] \"xPONENT\" #>  #> $Build #> [1] \"4.2.1705.0\" #>  #> $Date #> [1] \"05/11/2022\" #>  #> $Time #> [1] \"4:45 PM\" #>  #> $SN #> [1] \"MAGPX16145704\" #>  #> $Batch #> [1] \"IgG_CovidOiseS4_30plex_plate5_20220511\" names(output[[\"Results\"]]) #>  [1] \"Median\"                       \"Net MFI\"                      #>  [3] \"Count\"                        \"Avg Net MFI\"                  #>  [5] \"Mean\"                         \"%CV\"                          #>  [7] \"Peak\"                         \"Std Dev\"                      #>  [9] \"Trimmed Count\"                \"Trimmed Mean\"                 #> [11] \"Trimmed % CV of Microspheres\" \"Trimmed Peak\"                 #> [13] \"Trimmed Standard Deviation\"   \"Units\"                        #> [15] \"Per Bead Count\"               \"Acquisition Time\"             #> [17] \"Dilution Factor\"              \"Analysis Types\"               #> [19] \"Audit Logs\"                   \"Warnings/Errors\" # sample of the data output[[\"Results\"]][[\"Median\"]][c(1, 2), c(1, 2, 3)] #>   Location Sample Spike_6P #> 1  1(1,A1)      B       24 #> 2  2(1,A2)      S    14256"},{"path":"https://mini-pw.github.io/PvSTATEM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tymoteusz Kwiecinski. Author, maintainer. Jakub Grzywaczewski. Author. Mateusz Nizwantowski. Author. Przemyslaw Biecek. Thesis advisor. Nuno Sepulveda. Thesis advisor.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kwiecinski T, Grzywaczewski J, Nizwantowski M (2025). PvSTATEM: Reading, Quality Control Preprocessing MBA (Multiplex Bead Assay) Data. R package version 2.0.0, https://mini-pw.github.io/PvSTATEM/, https://github.com/mini-pw/PvSTATEM.","code":"@Manual{,   title = {PvSTATEM: Reading, Quality Control and Preprocessing of MBA (Multiplex Bead Assay) Data},   author = {Tymoteusz Kwiecinski and Jakub Grzywaczewski and Mateusz Nizwantowski},   year = {2025},   note = {R package version 2.0.0, https://mini-pw.github.io/PvSTATEM/},   url = {https://github.com/mini-pw/PvSTATEM}, }"},{"path":[]},{"path":"https://mini-pw.github.io/PvSTATEM/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Reading, Quality Control and Preprocessing of MBA (Multiplex Bead Assay) Data","text":"package simple tool handles various raw data formats produced Multiplex Bead Assay (MBA). short, reads unstructured, raw data , e.g., Luminex device outputs normalised well-structured data, can used later advanced downstream analysis. package includes three main steps preprocessing data: data reading manipulation quality control data normalisation PvSTATEM package developed within project name - PvSTATEM, international project aiming malaria elimination financially supported HORIZON grant HORIZON-WIDERA-2022-ACCESS-07-01.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reading, Quality Control and Preprocessing of MBA (Multiplex Bead Assay) Data","text":"easiest way install package using CRAN repository: Now, ready use package read files! Please note since uploading package CRAN repository requires volunteers’ time manually run checks packages, package version currently released CRAN might latest. package heavy development, new features released weekly. Therefore, ’d like test latest package functionalities, recommend installing development version. can done using simple command install_github available devtools library: first command loads devtools library (might need install first - using command install_packages(\"devtools\")), second one sources git repository code package automatically installs .","code":"install.packages(\"PvSTATEM\") require(PvSTATEM) # load the installed package require(devtools) install_github(\"mini-pw/PvSTATEM\") require(PvSTATEM) # load the installed package"},{"path":"https://mini-pw.github.io/PvSTATEM/index.html","id":"examples-and-instructions","dir":"","previous_headings":"","what":"Examples and instructions","title":"Reading, Quality Control and Preprocessing of MBA (Multiplex Bead Assay) Data","text":"example use package functionalities can found vignettes. detailed documentation, check package website.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/index.html","id":"contributing-and-issues","dir":"","previous_headings":"","what":"Contributing and issues","title":"Reading, Quality Control and Preprocessing of MBA (Multiplex Bead Assay) Data","text":"project development phase, open suggestions, bug reports, contributions. ideas issues, please report Issues section. team developers address soon possible.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":null,"dir":"Reference","previous_headings":"","what":"Logistic regression model for the standard curve — Model","title":"Logistic regression model for the standard curve — Model","text":"Model class wrapper around nplr model. allows predict RAU (Relative Antibody Unit) values directly MFI values given sample. nplr model fitted using formula: $$y = B + \\frac{T - B}{(1 + 10^{b \\cdot (x_{mid} - x)})^s},$$ : \\(y\\) predicted value, MFI case, \\(x\\) independent variable, dilution case, \\(B\\) bottom plateau - right horizontal asymptote, \\(T\\) top plateau - left horizontal asymptote, \\(b\\) slope curve inflection point, \\(x_{mid}\\) x-coordinate inflection point, \\(s\\) asymmetric coefficient. equation referred Richards' equation. information model can found nplr package documentation. model fitted data, RAU values can predicted using predict method. RAU value simply predicted dilution value (using standard curve) given MFI multiplied 1,000 000 readable value. information differences dilution, RAU MFI values, please see \"Normalisation\" section \"Basic PvSTATEM functionalities\" vignette.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Logistic regression model for the standard curve — Model","text":"analyte (character(1)) Name analyte model fitted dilutions (numeric()) Dilutions used fit model mfi (numeric()) MFI values used fit model mfi_min (numeric(1)) Minimum MFI used scaling MFI values range [0, 1] mfi_max (numeric(1)) Maximum MFI used scaling MFI values range [0, 1] model (nplr) Instance nplr model fitted data log_dilution (logical()) Indicator dilutions transformed using log10 function log_mfi (logical()) Indicator MFI values transformed using log10 function scale_mfi (logical()) Indicator MFI values scaled range [0, 1]","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Logistic regression model for the standard curve — Model","text":"top_asymptote (numeric(1)) top asymptote logistic curve bottom_asymptote (numeric(1)) bottom asymptote logistic curve","code":""},{"path":[]},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Logistic regression model for the standard curve — Model","text":"Model$new() Model$predict() Model$get_plot_data() Model$print() Model$clone()","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Logistic regression model for the standard curve — Model","text":"Create new instance Model R6 class","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic regression model for the standard curve — Model","text":"","code":"Model$new(   analyte,   dilutions,   mfi,   npars = 5,   verbose = TRUE,   log_dilution = TRUE,   log_mfi = TRUE,   scale_mfi = TRUE,   mfi_min = NULL,   mfi_max = NULL )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic regression model for the standard curve — Model","text":"analyte (character(1)) Name analyte model fitted. dilutions (numeric()) Dilutions used fit model mfi MFI (numeric()) values used fit model npars (numeric(1)) Number parameters use model verbose (logical()) TRUE prints messages, TRUE default log_dilution (logical()) TRUE dilutions transformed using log10 function, TRUE default log_mfi (logical()) TRUE MFI values transformed using log10 function, TRUE default scale_mfi (logical()) TRUE MFI values scaled range [0, 1], TRUE default mfi_min (numeric(1)) Enables set minimum MFI value used scaling MFI values range [0, 1]. Use values transformations (e.g., log10 transformation) mfi_max (numeric(1)) Enables set maximum MFI value used scaling MFI values range [0, 1]. Use values transformations (e.g., log10 transformation)","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"method-predict-","dir":"Reference","previous_headings":"","what":"Method predict()","title":"Logistic regression model for the standard curve — Model","text":"Predict RAU values MFI values","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic regression model for the standard curve — Model","text":"","code":"Model$predict(mfi, over_max_extrapolation = 0, eps = 1e-06)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic regression model for the standard curve — Model","text":"mfi (numeric()) MFI values want predict RAU values over_max_extrapolation (numeric(1)) much can extrapolate values maximum RAU value seen standard curve samples \\(\\text{RAU}_{max}\\). Defaults 0. value predicted RAU \\(RAU_{max} + \\text{\\_max\\_extrapolation}\\), value censored value sum. eps (numeric(1)) small value used avoid numerical issues close asymptotes","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Logistic regression model for the standard curve — Model","text":"(data.frame()) Dataframe predicted RAU values given MFI values columns named follows: RAU - Relative Antibody Units (RAU) value MFI - predicted MFI value","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"method-get-plot-data-","dir":"Reference","previous_headings":"","what":"Method get_plot_data()","title":"Logistic regression model for the standard curve — Model","text":"Data can used plot standard curve.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic regression model for the standard curve — Model","text":"","code":"Model$get_plot_data()"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Logistic regression model for the standard curve — Model","text":"(data.frame()) Prediction dataframe scaled MFI (logMFI) values range [0, 1]. Columns named predict method","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Logistic regression model for the standard curve — Model","text":"Function prints basic information model number parameters samples used","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic regression model for the standard curve — Model","text":"","code":"Model$print()"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Logistic regression model for the standard curve — Model","text":"objects class cloneable method.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic regression model for the standard curve — Model","text":"","code":"Model$clone(deep = FALSE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic regression model for the standard curve — Model","text":"deep Whether make deep clone.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logistic regression model for the standard curve — Model","text":"","code":"plate_file <- system.file(\"extdata\", \"CovidOISExPONTENT.csv\", package = \"PvSTATEM\") layout_file <- system.file(\"extdata\", \"CovidOISExPONTENT_layout.csv\", package = \"PvSTATEM\") plate <- read_luminex_data(plate_file, layout_filepath = layout_file) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT! #>  model <- create_standard_curve_model_analyte(plate, \"S2\", log_mfi = TRUE) print(model) #> Instance of the Model class fitted for analyte ' S2 ':  #>  - fitted with 5 parameters #>  - using 11 samples #>  - using log residuals (mfi):  TRUE  #>  - using log dilution:  TRUE  #>  - top asymptote: 6587.765  #>  - bottom asymptote: 24.6534  #>  - goodness of fit: 0.996416  #>  - weighted goodness of fit: 0.9998704"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Plate object — Plate","title":"Plate object — Plate","text":"class represent luminex plate. contains information samples analytes examined plate well additional metadata batch info","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Plate object — Plate","text":"plate_name (character(1)) Name plate. Set name file plate read. analyte_names (character()) Names analytes examined plate. sample_names (character()) Names samples examined plate. order samples vector identical order CSV source file. batch_name (character(1)) Name batch plate belongs. plate_datetime (POSIXct()) date time plate created machine sample_locations (character()) Locations samples plate. vector order sample_names vector. sample_types (character()) Types samples examined plate. possible values c(, BLANK, TEST, NEGATIVE CONTROL, STANDARD CURVE, POSITIVE CONTROL). vector order sample_names vector. dilutions (character()) list containing names samples keys string representing dilutions values. dilutions represented strings. vector order sample_names vector. dilution_values (numeric()) list containing names samples keys numeric values representing dilutions values. order sample_names vector. default_data_type (character(1)) default data type returned get_data method. default set Median. data (list()) list containing dataframes data sample analyte. possible data types - keys list : c(Median, Net MFI, Count, Avg Net MFI, Mean, Peak). dataframe, rows represent samples columns represent analytes. batch_info (list()) list containing additional, technical information batch. layout (character()) list containing information layout plate. layout read separate file usually provides additional information dilutions, sample names, sample layout actual plate. blank_adjusted (logical) flag indicating whether blank values adjusted.","code":""},{"path":[]},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Plate object — Plate","text":"Plate$new() Plate$print() Plate$summary() Plate$get_data() Plate$get_dilution() Plate$get_dilution_values() Plate$blank_adjustment() Plate$clone()","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Plate object — Plate","text":"Method initialize Plate object","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plate object — Plate","text":"","code":"Plate$new(   plate_name,   sample_names,   analyte_names,   batch_name = \"\",   plate_datetime = NULL,   sample_locations = NULL,   sample_types = NULL,   dilutions = NULL,   dilution_values = NULL,   default_data_type = NULL,   data = NULL,   batch_info = NULL,   layout = NULL )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plate object — Plate","text":"plate_name (character(1)) Name plate. default set empty string, reading process set name file plate read. sample_names (character()) Names samples examined plate. analyte_names (character()) Names analytes examined plate. batch_name (character(1)) Name batch plate belongs. default set empty string, reading process set batch field plate plate_datetime (POSIXct()) Datetime object representing date time plate created machine. sample_locations (character()) Locations samples plate. sample_types (character()) Types samples examined plate. possible values c(, BLANK, TEST, NEGATIVE CONTROL, STANDARD CURVE, POSITIVE CONTROL). dilutions (character()) list containing names samples keys string representing dilutions values. dilutions represented strings. dilution_values (numeric()) list containing names samples keys numeric values representing dilutions values. default_data_type (character(1)) default data type returned get_data method. default set Median. data (list()) list containing dataframes data sample analyte. possible data types - keys list c(Median, Net MFI, Count, Avg Net MFI, Mean, Peak). dataframe, rows represent samples columns represent analytes. batch_info (list()) list containing additional, technical information batch. layout (character()) list containing information layout plate. layout read separate file usually provides additional information dilutions, sample names, sample layout actual plate.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Plate object — Plate","text":"Function prints basic information plate number samples analytes","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Plate object — Plate","text":"","code":"Plate$print(...)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plate object — Plate","text":"... Additional parameters passed print function Print summary plate","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"method-summary-","dir":"Reference","previous_headings":"","what":"Method summary()","title":"Plate object — Plate","text":"Function outputs basic information plate, examination date, batch name, sample types.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Plate object — Plate","text":"","code":"Plate$summary(..., include_names = FALSE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plate object — Plate","text":"... Additional parameters passed print function Get data specific analyte sample type include_names include_names parameter TRUE, part count control samples, provides also names. default FALSE","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"method-get-data-","dir":"Reference","previous_headings":"","what":"Method get_data()","title":"Plate object — Plate","text":"Function returns data specific analyte sample.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Plate object — Plate","text":"","code":"Plate$get_data(   analyte,   sample_type = \"ALL\",   data_type = self$default_data_type )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plate object — Plate","text":"analyte analyte name id data want extract. set '' returns data analytes. sample_type type sample want extract data . possible values c(, BLANK, TEST, NEGATIVE CONTROL, STANDARD CURVE, POSITIVE CONTROL). Default value . data_type parameter specifying data type returned. parameter take one values: c(Median, Net MFI, Count, Avg Net MFI, Mean, Peak). , data_type present plate's data Default value plate's default_data_type, usually Median.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Plate object — Plate","text":"Dataframe containing information given sample type analyte Get string representation dilutions","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"method-get-dilution-","dir":"Reference","previous_headings":"","what":"Method get_dilution()","title":"Plate object — Plate","text":"Function returns dilution represented strings specific sample type.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Plate object — Plate","text":"","code":"Plate$get_dilution(sample_type)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plate object — Plate","text":"sample_type type samples want obtain dilution . possible values c(, BLANK, TEST, NEGATIVE CONTROL, STANDARD CURVE, POSITIVE CONTROL) Default value .","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Plate object — Plate","text":"list containing names samples keys string representing dilutions values. Get numeric representation dilutions","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"method-get-dilution-values-","dir":"Reference","previous_headings":"","what":"Method get_dilution_values()","title":"Plate object — Plate","text":"Function returns dilution values specific sample type.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Plate object — Plate","text":"","code":"Plate$get_dilution_values(sample_type)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plate object — Plate","text":"sample_type type samples want obtain dilution values . possible values c(, BLANK, TEST, NEGATIVE CONTROL, STANDARD CURVE, POSITIVE CONTROL) Default value .","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Plate object — Plate","text":"list containing names samples keys numeric values representing dilutions values. Adjust MFI values subtracting background","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"method-blank-adjustment-","dir":"Reference","previous_headings":"","what":"Method blank_adjustment()","title":"Plate object — Plate","text":"Function adjusts values samples (samples excluding blanks) clamping values aggregated value BLANK samples analyte separately. purpose operation unify data clamping values background noise. method works inspired paper https://doi.org/10.1038/s41598-020-57876-0 covers quality control MBA. short, operation firstly calculates aggregate MFI BLANK samples (available methods : min, max, mean, median) replaces values threshold threshold value. Method modifies data type Count. operation recommended performed analysis, optional. Skipping analysis allowed, result warning.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Plate object — Plate","text":"","code":"Plate$blank_adjustment(threshold = \"max\", in_place = TRUE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plate object — Plate","text":"threshold method used calculate background value analyte. Every value threshold clamped threshold value. default max. Available methods : min, max, mean, median. inplace Whether method produce new plate adjusted values , default TRUE - operates current plate.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Plate object — Plate","text":"objects class cloneable method.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Plate object — Plate","text":"","code":"Plate$clone(deep = FALSE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/Plate.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plate object — Plate","text":"deep Whether make deep clone.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":null,"dir":"Reference","previous_headings":"","what":"PlateBuilder — PlateBuilder","title":"PlateBuilder — PlateBuilder","text":"class helps creating Plate object. used store data validate final fields.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"PlateBuilder — PlateBuilder","text":"layout_as_vector Print layout associated plate flattened vector values.","code":""},{"path":[]},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"PlateBuilder — PlateBuilder","text":"PlateBuilder$new() PlateBuilder$set_sample_locations() PlateBuilder$set_dilutions() PlateBuilder$set_sample_types() PlateBuilder$set_sample_names() PlateBuilder$set_plate_datetime() PlateBuilder$set_data() PlateBuilder$set_default_data_type() PlateBuilder$set_batch_info() PlateBuilder$set_plate_name() PlateBuilder$set_layout() PlateBuilder$build() PlateBuilder$clone()","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"PlateBuilder — PlateBuilder","text":"Initialize PlateBuilder object","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$new(sample_names, analyte_names, batch_name = \"\", verbose = TRUE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlateBuilder — PlateBuilder","text":"sample_names vector sample names measured examination order data analyte_names vector analytes names measured examination order data batch_name name batch plate examined obtained plate info. optional parameter, default set \"\" - empty string. verbose logical value indicating whether print additional information. parameter stored private attribute object reused methods","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"method-set-sample-locations-","dir":"Reference","previous_headings":"","what":"Method set_sample_locations()","title":"PlateBuilder — PlateBuilder","text":"Set sample types used examination","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$set_sample_locations(sample_locations)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlateBuilder — PlateBuilder","text":"sample_locations vector sample locations pretty name ie. A1, B2","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"method-set-dilutions-","dir":"Reference","previous_headings":"","what":"Method set_dilutions()","title":"PlateBuilder — PlateBuilder","text":"Extract set dilutions layout, sample names use provided vector values. provided vector length number samples contain dilution factors saved strings","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$set_dilutions(use_layout_dilutions = TRUE, values = NULL)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlateBuilder — PlateBuilder","text":"use_layout_dilutions logical value indicating whether use names extracted layout files extract dilutions. set FALSE function uses sample names source dilution values vector dilutions overwrite extraction process Set extract sample types sample names. Optionally use layout file extract sample types","code":""},{"path":[]},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$set_sample_types(use_layout_types = TRUE, values = NULL)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlateBuilder — PlateBuilder","text":"use_layout_types logical value indicating whether use names extracted layout files extract sample types values vector sample types overwrite extraction process","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"method-set-sample-names-","dir":"Reference","previous_headings":"","what":"Method set_sample_names()","title":"PlateBuilder — PlateBuilder","text":"Set sample names used examination. layout provided, extract sample names layout file. Otherwise, uses original sample names Luminex file","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$set_sample_names(use_layout_sample_names = TRUE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlateBuilder — PlateBuilder","text":"use_layout_sample_names logical value indicating whether use names extracted layout files. set false, function checks sample names provided plate","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"method-set-plate-datetime-","dir":"Reference","previous_headings":"","what":"Method set_plate_datetime()","title":"PlateBuilder — PlateBuilder","text":"Set plate datetime plate","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$set_plate_datetime(plate_datetime)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlateBuilder — PlateBuilder","text":"plate_datetime POSIXct datetime object representing date time examination","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"method-set-data-","dir":"Reference","previous_headings":"","what":"Method set_data()","title":"PlateBuilder — PlateBuilder","text":"Set data used examination","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$set_data(data)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlateBuilder — PlateBuilder","text":"data named list data frames containing information samples analytes. list named type data e.g. Median, Net MFI, etc. data frames contain information samples analytes rows different measures, whereas columns represent different analytes Example data$Median looks like:","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"method-set-default-data-type-","dir":"Reference","previous_headings":"","what":"Method set_default_data_type()","title":"PlateBuilder — PlateBuilder","text":"Set data type used calculations","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$set_default_data_type(data_type = \"Median\")"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlateBuilder — PlateBuilder","text":"data_type character value representing type data currently used calculations. default, set Median","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"method-set-batch-info-","dir":"Reference","previous_headings":"","what":"Method set_batch_info()","title":"PlateBuilder — PlateBuilder","text":"Set batch info plate","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$set_batch_info(batch_info)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlateBuilder — PlateBuilder","text":"batch_info raw list containing metadata plate read Luminex file","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"method-set-plate-name-","dir":"Reference","previous_headings":"","what":"Method set_plate_name()","title":"PlateBuilder — PlateBuilder","text":"Set plate name plate. plate name extracted filepath","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$set_plate_name(file_path)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"method-set-layout-","dir":"Reference","previous_headings":"","what":"Method set_layout()","title":"PlateBuilder — PlateBuilder","text":"Set layout matrix plate. function performs basic validation verifies plate matrix shape 8x12 96 wells","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$set_layout(layout_matrix)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlateBuilder — PlateBuilder","text":"layout_matrix matrix containing information sample names. dilutions, etc.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"method-build-","dir":"Reference","previous_headings":"","what":"Method build()","title":"PlateBuilder — PlateBuilder","text":"Create Plate object PlateBuilder object","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$build(validate = TRUE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"PlateBuilder — PlateBuilder","text":"objects class cloneable method.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"PlateBuilder — PlateBuilder","text":"","code":"PlateBuilder$clone(deep = FALSE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/PlateBuilder.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"PlateBuilder — PlateBuilder","text":"deep Whether make deep clone.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/check_path_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if two paths are equal — check_path_equal","title":"Check if two paths are equal — check_path_equal","text":"Function checks two paths equal converting absolute paths.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/check_path_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if two paths are equal — check_path_equal","text":"","code":"check_path_equal(path1, path2)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/check_path_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if two paths are equal — check_path_equal","text":"path1 (character(1)) first path compared. path2 (character(1)) second path compared.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/check_path_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if two paths are equal — check_path_equal","text":"(logical(1)) TRUE paths equal, FALSE otherwise.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/clamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Clamp a value to a range — clamp","title":"Clamp a value to a range — clamp","text":"Clamp value range","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/clamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clamp a value to a range — clamp","text":"","code":"clamp(x, lower = -Inf, upper = Inf)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/clamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clamp a value to a range — clamp","text":"x (numeric()) numeric value clamped. lower ('numeric(1)') lower bound range. upper (numeric(1)) upper bound range.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/clamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clamp a value to a range — clamp","text":"numeric value clamped range [lower, upper].","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/convert_dilutions_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert dilutions to numeric values — convert_dilutions_to_numeric","title":"Convert dilutions to numeric values — convert_dilutions_to_numeric","text":"Convert dilutions saved strings format 1/\\d+ numeric values","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/convert_dilutions_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert dilutions to numeric values — convert_dilutions_to_numeric","text":"","code":"convert_dilutions_to_numeric(dilutions)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/convert_dilutions_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert dilutions to numeric values — convert_dilutions_to_numeric","text":"dilutions vector dilutions used examination saved strings format 1/\\d+","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/convert_dilutions_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert dilutions to numeric values — convert_dilutions_to_numeric","text":"vector numeric values representing dilutions","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/create_standard_curve_model_analyte.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a standard curve model for a certain analyte — create_standard_curve_model_analyte","title":"Create a standard curve model for a certain analyte — create_standard_curve_model_analyte","text":"Create standard curve model certain analyte","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/create_standard_curve_model_analyte.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a standard curve model for a certain analyte — create_standard_curve_model_analyte","text":"","code":"create_standard_curve_model_analyte(   plate,   analyte_name,   data_type = \"Median\",   source_mfi_range_from_all_analytes = FALSE,   detect_high_dose_hook = TRUE,   ... )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/create_standard_curve_model_analyte.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a standard curve model for a certain analyte — create_standard_curve_model_analyte","text":"plate (Plate()) Object Plate class analyte_name (character(1)) Name analyte want create model data_type (character(1)) Data type value want use fit model - datatype plate file. default, equals Median source_mfi_range_from_all_analytes (logical(1)) TRUE, MFI range calculated analytes; FALSE, MFI range calculated current analyte Defaults FALSE detect_high_dose_hook (logical(1)) TRUE, high dose hook effect detected handled. information, please see handle_high_dose_hook function documentation. ... Additional arguments passed model Standard curve samples contain na values mfi values dilutions.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/create_standard_curve_model_analyte.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a standard curve model for a certain analyte — create_standard_curve_model_analyte","text":"(Model()) Standard Curve model","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/create_vector_without_holes.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove holes from a vector — create_vector_without_holes","title":"Remove holes from a vector — create_vector_without_holes","text":"Function selects values vector given locations creates vector \"without holes\". Works 96-plate.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/create_vector_without_holes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove holes from a vector — create_vector_without_holes","text":"","code":"create_vector_without_holes(vector, locations)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/create_vector_without_holes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove holes from a vector — create_vector_without_holes","text":"vector vector values locations vector locations values placed","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/create_vector_without_holes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove holes from a vector — create_vector_without_holes","text":"vector values given locations","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/detect_mba_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Try to detect the format of a file — detect_mba_format","title":"Try to detect the format of a file — detect_mba_format","text":"Try detect format file","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/detect_mba_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try to detect the format of a file — detect_mba_format","text":"","code":"detect_mba_format(filepath, format = NULL)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/dilution_to_rau.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert dilution to RAU — dilution_to_rau","title":"Convert dilution to RAU — dilution_to_rau","text":"Convert dilution RAU","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/dilution_to_rau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert dilution to RAU — dilution_to_rau","text":"","code":"dilution_to_rau(predicted_dilution)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/dilution_to_rau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert dilution to RAU — dilution_to_rau","text":"predicted_dilution (numeric()) numeric value representing predicted dilution.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/dilution_to_rau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert dilution to RAU — dilution_to_rau","text":"RAU value corresponding predicted dilution .","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/extract_dilution_from_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract dilution factor from the sample name — extract_dilution_from_names","title":"Extract dilution factor from the sample name — extract_dilution_from_names","text":"function extracts dilution factor sample name - useful detecting dilution sample names","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/extract_dilution_from_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract dilution factor from the sample name — extract_dilution_from_names","text":"","code":"extract_dilution_from_names(sample_name)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/extract_dilution_from_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract dilution factor from the sample name — extract_dilution_from_names","text":"sample_name vector sample names want extract dilutions","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/extract_dilution_from_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract dilution factor from the sample name — extract_dilution_from_names","text":"vector dilutions represented strings extracted sample names","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/extract_dilutions_from_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract dilutions from the layout representation — extract_dilutions_from_layout","title":"Extract dilutions from the layout representation — extract_dilutions_from_layout","text":"Extract dilution factor represented string vector characters. matches exact dilution factor form 1/\\d+","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/extract_dilutions_from_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract dilutions from the layout representation — extract_dilutions_from_layout","text":"","code":"extract_dilutions_from_layout(dilutions)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/extract_dilutions_from_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract dilutions from the layout representation — extract_dilutions_from_layout","text":"dilutions vector dilutions used examination due nature data vector strings, numeric vales created strings","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/extract_sample_names_from_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract sample names from layout — extract_sample_names_from_layout","title":"Extract sample names from layout — extract_sample_names_from_layout","text":"Function extracts sample names layout file based provided locations. Function assumes plate 96-well extracts sample names according provided location strings.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/extract_sample_names_from_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract sample names from layout — extract_sample_names_from_layout","text":"","code":"extract_sample_names_from_layout(layout_names, locations)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/extract_sample_names_from_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract sample names from layout — extract_sample_names_from_layout","text":"layout_names vector sample names layout file locations vector locations form A1, B2, etc.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/find_layout_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a layout file given plate filepath — find_layout_file","title":"Find a layout file given plate filepath — find_layout_file","text":"Find layout file given plate filepath","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/find_layout_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a layout file given plate filepath — find_layout_file","text":"","code":"find_layout_file(plate_filepath, layout_filepath = NULL)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/format_dilutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Format dilutions — format_dilutions","title":"Format dilutions — format_dilutions","text":"function counts number times dilution factor appears sorts descending order based corresponding dilution values. output string lists dilution factors counts format count x dilution_factor. dilutions vector looks like c(\"1/2\", \"1/2\", \"1/2\", \"1/3\", \"1/3\", \"1/4\"), output \"3x1/2, 2x1/3, 1x1/4\".","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/format_dilutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format dilutions — format_dilutions","text":"","code":"format_dilutions(dilutions, dilution_values, sample_types)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/format_dilutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format dilutions — format_dilutions","text":"dilutions vector dilution factors, taken plate object. dilution_values vector dilution values corresponding dilution factors, taken plate object. Used sorting purposes. sample_types vector sample types taken plate object.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/format_dilutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format dilutions — format_dilutions","text":"formatted string lists dilution factors counts. Returns NULL dilutions NULL.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/generate_levey_jennings_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a report with Levey-Jennings plots. — generate_levey_jennings_report","title":"Generate a report with Levey-Jennings plots. — generate_levey_jennings_report","text":"function generates report Levey-Jennings plots. report generated using levey_jennings_report_template.Rmd template.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/generate_levey_jennings_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a report with Levey-Jennings plots. — generate_levey_jennings_report","text":"","code":"generate_levey_jennings_report(   list_of_plates,   filename = NULL,   output_dir = \"reports\" )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/generate_levey_jennings_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a report with Levey-Jennings plots. — generate_levey_jennings_report","text":"list_of_plates list plate objects. filename (character(1)) name output file. provided, filename created based plate name suffix '_report.html'. output_dir (character(1)) directory report saved. Default 'reports'.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/generate_levey_jennings_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a report with Levey-Jennings plots. — generate_levey_jennings_report","text":"report.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/generate_plate_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a report for a plate. — generate_plate_report","title":"Generate a report for a plate. — generate_plate_report","text":"function generates report plate. report contains necessary information plate, general plate parameters, examination date, breakdown analytes' plots. report generated using plate_report_template.Rmd template.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/generate_plate_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a report for a plate. — generate_plate_report","text":"","code":"generate_plate_report(   plate,   use_model = TRUE,   filename = NULL,   output_dir = \"reports\",   counts_lower_threshold = 50,   counts_higher_threshold = 70,   additional_notes = NULL )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/generate_plate_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a report for a plate. — generate_plate_report","text":"plate plate object. use_model (logical(1)) logical value indicating whether model used report. filename (character(1)) name output HTML report file. provided equals NULL, output filename based plate name, precisely: {plate_name}_report.html. default plate_name filename input file contains plate data. details please refer Plate. passed filename contain .html extension, default extension .html added. Filename can also path file, e.g. path//file.html. case, output_dir filename joined together. However, passed filepath absolute path output_dir parameter also provided, output_dir parameter ignored. file already exists specified filepath, function overwrite . output_dir (character(1)) directory output CSV file saved. Please note directory path provided create necessary directories (including parent directories) exist. equals NULL current working directory used. Default 'reports'. counts_lower_threshold (numeric(1)) lower threshold counts plots (works analyte). Default 50. counts_higher_threshold (numeric(1)) higher threshold counts plots (works analyte). Default 70. additional_notes (character(1)) Additional notes included report. Contents fields left user's discretion. provided, field included report.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/generate_plate_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a report for a plate. — generate_plate_report","text":"report.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/generate_plate_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a report for a plate. — generate_plate_report","text":"","code":"plate_file <- system.file(\"extdata\", \"CovidOISExPONTENT_CO_reduced.csv\", package = \"PvSTATEM\") # a plate file with reduced number of analytes to speed up the computation layout_file <- system.file(\"extdata\", \"CovidOISExPONTENT_CO_layout.xlsx\", package = \"PvSTATEM\") note <- \"This is a test report.\\n**Author**: Jane Doe \\n**Tester**: John Doe\"  plate <- read_luminex_data(plate_file, layout_file, verbose = FALSE) example_dir <- tempdir(check = TRUE) # a temporary directory generate_plate_report(plate,   output_dir = example_dir,   counts_lower_threshold = 40,   counts_higher_threshold = 50,   additional_notes = note ) #> Generating report...This will take approximately 30 seconds. #> Report successfully generated, saving to: /tmp/RtmpdGePL2"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_join_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the Join Value — get_join_value","title":"Determine the Join Value — get_join_value","text":"Returns non-NA/non-NULL value based inputs. either value NA NULL, returns non-NA/non-NULL value. values equal, returns value.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_join_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the Join Value — get_join_value","text":"","code":"get_join_value(x, y)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_join_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the Join Value — get_join_value","text":"x value compared. y value compared.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_join_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the Join Value — get_join_value","text":"non-NA/non-NULL value common value x equals y. Returns NULL values differ neither NA NULL.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_location_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the matrix of plate locations — get_location_matrix","title":"Generate the matrix of plate locations — get_location_matrix","text":"function generates matrix plate locations. locations represented nrow x ncol matrix. Usually number rows equals 8 number columns 12, total matrix size 96. fields represented E3, letter corresponds row number column.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_location_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the matrix of plate locations — get_location_matrix","text":"","code":"get_location_matrix(nrow = 8, ncol = 12, as_vector = FALSE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_location_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the matrix of plate locations — get_location_matrix","text":"nrow Number rows plate ncol Number columns plate as_vector logical value indicating whether return locations vector","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_location_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the matrix of plate locations — get_location_matrix","text":"matrix locations","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_nmfi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate normalised MFI values for a plate — get_nmfi","title":"Calculate normalised MFI values for a plate — get_nmfi","text":"function calculates normalised MFI (nMFI) values analytes plate. nMFI values calculated ratio test samples' MFI values standard curve samples target dilution. nMFI used? general, preferred use Relative Antibody Unit (RAU) values analysis. However, sometimes impossible fit model standard curve samples. may happen MFI values test samples much higher MFI standard curve samples. , prediction require significant data extrapolation, lead unreliable results. cases, nMFI values used proxy RAU values want, instance, account plate--plate variation.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_nmfi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate normalised MFI values for a plate — get_nmfi","text":"","code":"get_nmfi(   plate,   reference_dilution = 1/400,   data_type = \"Median\",   verbose = TRUE )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_nmfi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate normalised MFI values for a plate — get_nmfi","text":"plate (Plate()) plate object calculate nMFI values reference_dilution (numeric(1) character(1)) dilution value standard curve sample use reference normalisation. default 1/400. refer dilution standard curve sample given plate object. parameter either numeric value string. case character string, format 1/d+, d+ positive integer. data_type (character(1)) type data computation. Median default verbose (logical(1)) print additional information. default TRUE","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_nmfi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate normalised MFI values for a plate — get_nmfi","text":"nmfi (data.frame) data frame normalised MFI values analyte plate test samples.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_nmfi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate normalised MFI values for a plate — get_nmfi","text":"","code":"# read the plate plate_file <- system.file(\"extdata\", \"CovidOISExPONTENT.csv\", package = \"PvSTATEM\") layout_file <- system.file(\"extdata\", \"CovidOISExPONTENT_layout.csv\", package = \"PvSTATEM\")  plate <- read_luminex_data(plate_file, layout_file) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT! #>   # artificially bump up the MFI values of the test samples (the Median data type is default one) plate$data[[\"Median\"]][plate$sample_types == \"TEST\", ] <-   plate$data[[\"Median\"]][plate$sample_types == \"TEST\", ] * 10  # calculate the nMFI values nmfi <- get_nmfi(plate, reference_dilution = 1 / 400)  # we don't do any extrapolation and the values should be comparable across plates head(nmfi) #>                Spike_6P       ME    HKU1_S   OC43_NP    OC43_S   HKU1_NP #> CO-F-226-01-CF 58.42408 19.88889  3.821903 15.449180 24.537445 10.957643 #> CO-F-263-02-KC 71.71064 14.71111 26.996681 13.481967 30.638767 11.694291 #> CO-F-080-02-TV 71.69239 20.24444 46.227876  6.085246 37.077827  9.410681 #> CO-F-215-01-BA 75.86304 32.88889 21.028761  3.816393  4.919236  6.841621 #> CO-H-SD-039-BC 36.95481 10.37778 14.778761  4.393443  3.340675  6.942910 #> CO-H-RD-053-MO 38.48162 23.86667 10.199115  9.718033  8.076358 10.101289 #>                 X229E_NP Mumps_NP RBD_B16171   NL63_NP RBD_B16172 RBD_wuhan #> CO-F-226-01-CF 21.180070 35.59322   256.1207 19.691092   218.1206  85.17229 #> CO-F-263-02-KC  5.576923 14.27966   322.8017  2.916667   271.6690  96.59775 #> CO-F-080-02-TV 20.611888 25.63559   363.6422  9.741379   289.6494 101.05912 #> CO-F-215-01-BA  8.933566 50.29661   426.0991  6.163793   322.8050 108.53827 #> CO-H-SD-039-BC 10.236014 12.03390   104.3103 11.357759    83.0014  44.06239 #> CO-H-RD-053-MO 26.634615 77.54237   106.6810  4.245690   101.7952  46.88067 #>                  NL63_S    X229E_S Spike_B16172 Spike_B117 Measles_NP      Ade5 #> CO-F-226-01-CF 33.54772   4.740177     90.21091   64.61869  15.324675 27.419733 #> CO-F-263-02-KC 19.87552  25.095057     92.81379   73.76692  46.190476 16.766603 #> CO-F-080-02-TV 21.70124  52.769328    111.20885   78.75536  61.428571 23.827151 #> CO-F-215-01-BA 63.94191  39.201521    120.52984   87.87884  11.904762 21.306260 #> CO-H-SD-039-BC 14.48133  15.057034     50.00514   40.64048   4.891775 10.552705 #> CO-H-RD-053-MO 91.53527 125.614702     53.17387   43.51106  33.614719  8.969359 #>                       NP Spike_P1      Rub     Ade40 RBD_B117 Spike_B1351 #> CO-F-226-01-CF 0.4600288 62.10091 61.03586 22.639035 223.4188    72.55825 #> CO-F-263-02-KC 0.3348938 67.04466 15.25327 37.208814 262.2906    72.53495 #> CO-F-080-02-TV 1.0694995 81.00914 27.53557 73.415530 275.6239    93.80009 #> CO-F-215-01-BA 1.3449766 87.09564 16.49402 29.412382 320.6667   105.24697 #> CO-H-SD-039-BC 0.5014404 34.12799 12.53273 13.300105 101.7094    40.24231 #> CO-H-RD-053-MO 4.0115232 40.63291 26.08423  5.146905 104.9573    41.37465 #>                     FluA RBD_B1351   RBD_P15       S2 Spike_omicron RBD_omicron #> CO-F-226-01-CF 20.279330 369.71429 286.56780 56.53736     210.01021   317.16981 #> CO-F-263-02-KC 89.208566 422.35714 344.83051 45.80460     260.78652   410.80189 #> CO-F-080-02-TV 30.633147 562.35714 390.42373 87.06897     301.92033   453.18396 #> CO-F-215-01-BA 63.431099 685.10714 499.11017 90.22989     369.75485   524.05660 #> CO-H-SD-039-BC  7.295158  80.64286  63.77119 29.26724      63.61593    65.14151 #> CO-H-RD-053-MO 53.580074 150.85714 117.52119 33.18966      90.27579   102.26415 # different params nmfi <- get_nmfi(plate, reference_dilution = \"1/50\")"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_output_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get output directory for a given input file — get_output_dir","title":"Get output directory for a given input file — get_output_dir","text":"Get output directory given input file","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/get_output_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get output directory for a given input file — get_output_dir","text":"","code":"get_output_dir(   input_file,   input_dir,   output_dir = NULL,   flatten_output = FALSE )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/handle_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle differences in datetimes — handle_datetime","title":"Handle differences in datetimes — handle_datetime","text":"Handle differences datetime format xPONENT INTELLIFLEX output POSIXct datetime object containing correct datetime default timezone.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/handle_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle differences in datetimes — handle_datetime","text":"","code":"handle_datetime(datetime_str, file_format = \"xPONENT\")"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/handle_datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle differences in datetimes — handle_datetime","text":"datetime_str datetime string parse file_format format file. Select : xPONENT, INTELLIFLEX","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/handle_datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle differences in datetimes — handle_datetime","text":"POSIXct datetime object","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/handle_high_dose_hook.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect and handle the high dose hook effect — handle_high_dose_hook","title":"Detect and handle the high dose hook effect — handle_high_dose_hook","text":"Typically, MFI values associated standard curve samples decrease dilute samples. However, sometimes high dilutions, MFI presents non monotonic behavior. case, MFI values associated dilutions (equal ) high_dose_threshold removed analysis. information effect please refer : Namburi, R. P. et. al. (2014) High-dose hook effect. nplr model recommended number standard curve samples least 4. high dose hook effect detected number samples high_dose_threshold lower 4, additional warning printed samples removed. function returns logical vector can used subset MFI values.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/handle_high_dose_hook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect and handle the high dose hook effect — handle_high_dose_hook","text":"","code":"handle_high_dose_hook(mfi, dilutions, high_dose_threshold = 1/200)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/handle_high_dose_hook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect and handle the high dose hook effect — handle_high_dose_hook","text":"mfi (numeric()) dilutions (numeric()) high_dose_threshold (numeric(1)) MFI values associated dilutions threshold checked high dose hook effect","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/handle_high_dose_hook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect and handle the high dose hook effect — handle_high_dose_hook","text":"sample selector (logical())","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/handle_high_dose_hook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect and handle the high dose hook effect — handle_high_dose_hook","text":"","code":"plate_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT.csv\", package = \"PvSTATEM\", mustWork = TRUE) # get the filepath of the csv dataset layout_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT_layout.xlsx\", package = \"PvSTATEM\", mustWork = TRUE) plate <- read_luminex_data(plate_filepath, layout_filepath) # read the data #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT! #>   # here we plot the data with observed high dose hook effect plot_standard_curve_analyte(plate, \"RBD_omicron\")   # here we create the model with the high dose hook effect handled model <- create_standard_curve_model_analyte(plate, \"RBD_omicron\")"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is.decreasing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the vector is monotically decreasing — is.decreasing","title":"Check if the vector is monotically decreasing — is.decreasing","text":"Check vector monotically decreasing","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is.decreasing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the vector is monotically decreasing — is.decreasing","text":"","code":"is.decreasing(x)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is.decreasing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the vector is monotically decreasing — is.decreasing","text":"x (numeric()) Vector numeric values","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is.decreasing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the vector is monotically decreasing — is.decreasing","text":"(logical(1)) TRUE vector monotonically decreasing, FALSE otherwise","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is.scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a value is a scalar — is.scalar","title":"Check if a value is a scalar — is.scalar","text":"return FALSE NULL vectors length bigger 2.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is.scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a value is a scalar — is.scalar","text":"","code":"is.scalar(x)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is.scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a value is a scalar — is.scalar","text":"x Object checked.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is.scalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a value is a scalar — is.scalar","text":"TRUE object scalar, FALSE otherwise.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is.str.number.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a string is a number — is.str.number","title":"Check if a string is a number — is.str.number","text":"Check string number","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is.str.number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a string is a number — is.str.number","text":"","code":"is.str.number(x)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is.str.number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a string is a number — is.str.number","text":"x string checked.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is.str.number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a string is a number — is.str.number","text":"TRUE string number, FALSE otherwise.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_mba_data_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify if a file is a MBA data file — is_mba_data_file","title":"Identify if a file is a MBA data file — is_mba_data_file","text":"Identify file MBA data file","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_mba_data_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify if a file is a MBA data file — is_mba_data_file","text":"","code":"is_mba_data_file(filepath, check_format = TRUE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_mba_data_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify if a file is a MBA data file — is_mba_data_file","text":"filepath (character(1)) path file. check_format (logical(1)) TRUE, function check file name contains supported format. default TRUE.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_mba_data_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify if a file is a MBA data file — is_mba_data_file","text":"TRUE file MBA data file, FALSE otherwise.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_mba_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a mba format is supported — is_mba_format","title":"Check if a mba format is supported — is_mba_format","text":"Check given format supported.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_mba_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a mba format is supported — is_mba_format","text":"","code":"is_mba_format(format, allow_nullable = FALSE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_mba_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a mba format is supported — is_mba_format","text":"format (character(1) Format string allow_nullable (logical(1)) Set TRUE format can NULL Defaults FALSE.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_mba_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a mba format is supported — is_mba_format","text":"(logical(1)) TRUE format supported list, else FALSE","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_outlier.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a value is an outlier — is_outlier","title":"Check if a value is an outlier — is_outlier","text":"Check value outlier","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_outlier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a value is an outlier — is_outlier","text":"","code":"is_outlier(x)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_outlier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a value is an outlier — is_outlier","text":"x Vector numeric values outliers detected.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_outlier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a value is an outlier — is_outlier","text":"logical vector indicating whether value outlier.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_valid_data_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Check validity of given data type — is_valid_data_type","title":"Check validity of given data type — is_valid_data_type","text":"Check data type valid. data type valid one elements VALID_DATA_TYPES vector. valid data types : c(Median, Net MFI, Count, Avg Net MFI, Mean, Peak).","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_valid_data_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check validity of given data type — is_valid_data_type","text":"","code":"is_valid_data_type(data_type)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_valid_data_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check validity of given data type — is_valid_data_type","text":"data_type string representing data type.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_valid_data_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check validity of given data type — is_valid_data_type","text":"TRUE data type valid, FALSE otherwise.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_valid_sample_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Check validity of given sample type — is_valid_sample_type","title":"Check validity of given sample type — is_valid_sample_type","text":"Check sample type valid. sample type valid one elements VALID_SAMPLE_TYPES vector. valid sample types : c(, BLANK, TEST, NEGATIVE CONTROL, STANDARD CURVE, POSITIVE CONTROL).","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_valid_sample_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check validity of given sample type — is_valid_sample_type","text":"","code":"is_valid_sample_type(sample_type)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_valid_sample_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check validity of given sample type — is_valid_sample_type","text":"sample_type string representing sample type.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/is_valid_sample_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check validity of given sample type — is_valid_sample_type","text":"TRUE sample type valid, FALSE otherwise.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot counts in a 96-well plate — plot_counts","title":"Plot counts in a 96-well plate — plot_counts","text":"function plots counts 96-well plate using colour represent count ranges. possibility plotting exact counts well.  plot window resized, best re-run function adjust scaling. Sometimes, legend plotted, whole layout may shifted. best stretch window, everything adjusted automatically.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot counts in a 96-well plate — plot_counts","text":"","code":"plot_counts(   plate,   analyte_name,   plot_counts = TRUE,   plot_legend = FALSE,   lower_threshold = 50,   higher_threshold = 70 )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot counts in a 96-well plate — plot_counts","text":"plate plate object counts data analyte_name name analyte plot_counts Logical indicating counts plotted plot_legend Logical indicating legend plotted lower_threshold lower threshold counts, separates green yellow colours higher_threshold higher threshold counts, separates yellow red colours","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot counts in a 96-well plate — plot_counts","text":"ggplot object","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot counts in a 96-well plate — plot_counts","text":"","code":"plate_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT_CO.csv\",   package = \"PvSTATEM\", mustWork = TRUE ) layout_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT_CO_layout.xlsx\",   package = \"PvSTATEM\", mustWork = TRUE ) plate <- read_luminex_data(plate_filepath, layout_filepath) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT_CO.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT_CO! #>  plot_counts(   plate = plate, analyte_name = \"OC43_NP_NA\",   plot_counts = TRUE, plot_legend = FALSE )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot layout of a 96-well plate — plot_layout","title":"Plot layout of a 96-well plate — plot_layout","text":"function plots layout 96-well plate using colour represent sample types.  plot window resized, best re-run function adjust scaling. Sometimes, whole layout may shifted legend plotted. best stretch window, everything adjusted automatically.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot layout of a 96-well plate — plot_layout","text":"","code":"plot_layout(plate, plot_legend = TRUE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot layout of a 96-well plate — plot_layout","text":"plate plate object layout information plot_legend Logical indicating legend plotted","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot layout of a 96-well plate — plot_layout","text":"ggplot object","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot layout of a 96-well plate — plot_layout","text":"","code":"plate_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT_CO.csv\",   package = \"PvSTATEM\", mustWork = TRUE ) layout_filepath <- system.file(\"extdata\", \"CovidOISExPONTENT_CO_layout.xlsx\",   package = \"PvSTATEM\", mustWork = TRUE ) plate <- read_luminex_data(plate_filepath, layout_filepath) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT_CO.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT_CO! #>  plot_layout(plate = plate, plot_legend = TRUE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_levey_jennings.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Levey-Jennings chart — plot_levey_jennings","title":"Plot Levey-Jennings chart — plot_levey_jennings","text":"function plots Levey-Jennings chart given analyte list plates. Levey-Jennings chart graphical representation data enables detection outliers trends. quality control tool widely used laboratories across world.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_levey_jennings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Levey-Jennings chart — plot_levey_jennings","text":"","code":"plot_levey_jennings(   list_of_plates,   analyte_name,   dilution = \"1/400\",   sd_lines = c(1.96),   data_type = \"Median\" )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_levey_jennings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Levey-Jennings chart — plot_levey_jennings","text":"list_of_plates list plate objects plot Levey-Jennings chart analyte_name (character(1)) analyte plot Levey-Jennings chart dilution (character(1)) dilution plot Levey-Jennings chart. default \"1/400\" sd_lines (numeric) vector coefficients standard deviation lines plot, example, c(1.96, 2.58) plot four horizontal lines: mean +/- 1.96sd, mean +/- 2.58sd default c(1.96) plot two lines mean +/- 1.96*sd data_type (character(1)) type data used plot. default \"Median\"","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_levey_jennings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Levey-Jennings chart — plot_levey_jennings","text":"ggplot object Levey-Jennings chart","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_levey_jennings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Levey-Jennings chart — plot_levey_jennings","text":"","code":"# creating temporary directory for the example output_dir <- tempdir(check = TRUE)  dir_with_luminex_files <- system.file(\"extdata\", \"multiplate_reallife_reduced\",   package = \"PvSTATEM\", mustWork = TRUE ) list_of_plates <- process_dir(dir_with_luminex_files,   return_plates = TRUE, format = \"xPONENT\", output_dir = output_dir ) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_1_xponent.csv #> using format xPONENT #>  #> New plate object has been created with name: IGG_CO_1_xponent! #>  #> Processing plate 'IGG_CO_1_xponent' #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/tmp/RtmpdGePL2/IGG_CO_1_xponent_RAU.csv' #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/tmp/RtmpdGePL2/IGG_CO_1_xponent_nMFI.csv' #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_2_xponent.csv #> using format xPONENT #>  #> New plate object has been created with name: IGG_CO_2_xponent! #>  #> Processing plate 'IGG_CO_2_xponent' #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/tmp/RtmpdGePL2/IGG_CO_2_xponent_RAU.csv' #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/tmp/RtmpdGePL2/IGG_CO_2_xponent_nMFI.csv' #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_3_xponent.csv #> using format xPONENT #>  #> New plate object has been created with name: IGG_CO_3_xponent! #>  #> Processing plate 'IGG_CO_3_xponent' #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/tmp/RtmpdGePL2/IGG_CO_3_xponent_RAU.csv' #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/tmp/RtmpdGePL2/IGG_CO_3_xponent_nMFI.csv' list_of_plates <- rep(list_of_plates, 10) # since we have only 3 plates i will repeat them 10 times  plot_levey_jennings(list_of_plates, \"ME\", dilution = \"1/400\", sd_lines = c(0.5, 1, 1.96, 2.58))"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_mfi_for_analyte.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MFI value distribution for a given analyte — plot_mfi_for_analyte","title":"Plot MFI value distribution for a given analyte — plot_mfi_for_analyte","text":"Plot MFI value distribution given analyte","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_mfi_for_analyte.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MFI value distribution for a given analyte — plot_mfi_for_analyte","text":"","code":"plot_mfi_for_analyte(   plate,   analyte_name,   data_type = \"Median\",   plot_type = \"violin\",   scale_y = \"log10\",   plot_outliers = FALSE )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_mfi_for_analyte.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MFI value distribution for a given analyte — plot_mfi_for_analyte","text":"plate plate object analyte_name analyte plot data_type type data plot. Default \"Median\" plot_type type plot generate. Default \"violin\". Available options \"boxplot\" \"violin\". scale_y kind transformation scale apply. default MFI presented \"log10\" scale. Available options described documentation scale_y_continuous undertransform parameter. plot_outliers using \"boxplot\" type plot one can set parameter TRUE display names samples MFI falls outside 1.5 IQR interval","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_mfi_for_analyte.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MFI value distribution for a given analyte — plot_mfi_for_analyte","text":"ggplot object","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a 96-well plate with coloured wells — plot_plate","title":"Plot a 96-well plate with coloured wells — plot_plate","text":"generic function plot 96-well plate coloured wells used functions package, mainly plot layout counts. function uses background image 96-well plate plots colours wells using ggplot2. function intended user use directly. Rather, used functions specified file.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a 96-well plate with coloured wells — plot_plate","text":"","code":"plot_plate(   colours,   plot_numbers = FALSE,   numbers = NULL,   plot_title = \"Plate\",   plot_legend = FALSE,   legend_mapping = NULL )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a 96-well plate with coloured wells — plot_plate","text":"colours vector 96 colours used colour wells; order left right top bottom plot_numbers Logical value indicating well numbers plotted, default FALSE numbers optional vector 96 numbers plotted wells. Order left right top bottom must length colours. used, instance, plot bead count well. Must provided case plot_numbers parameter set TRUE plot_title title plot (default \"Plate\") plot_legend Logical value indicating legend plotted, default FALSE legend_mapping named vector colour mapping used create legend","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a 96-well plate with coloured wells — plot_plate","text":"ggplot object","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_analyte.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard curves — plot_standard_curve_analyte","title":"Standard curves — plot_standard_curve_analyte","text":"Plot standard curve samples plate given analyte.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_analyte.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard curves — plot_standard_curve_analyte","text":"","code":"plot_standard_curve_analyte(   plate,   analyte_name,   data_type = \"Median\",   decreasing_rau_order = TRUE,   log_scale = c(\"all\"),   plot_line = TRUE,   plot_blank_mean = TRUE,   plot_rau_bounds = TRUE,   plot_legend = TRUE,   verbose = TRUE )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_analyte.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard curves — plot_standard_curve_analyte","text":"plate plate object analyte_name Name analyte standard curve want plot. data_type Data type value want plot - datatype plate file. default equals Net MFI decreasing_rau_order TRUE RAU values plotted decreasing order, TRUE default log_scale elements plot displayed log scale. default \"RAU\". NULL c() log scale used, \"\" c(\"RAU\", \"MFI\") elements displayed log scale. plot_line TRUE line plotted, TRUE default plot_blank_mean TRUE mean blank samples plotted, TRUE default plot_rau_bounds TRUE RAU values bounds plotted, TRUE default plot_legend TRUE legend plotted, TRUE default verbose TRUE prints messages, TRUE default","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_analyte.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard curves — plot_standard_curve_analyte","text":"ggplot object plot","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_analyte.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard curves — plot_standard_curve_analyte","text":"","code":"path <- system.file(\"extdata\", \"CovidOISExPONTENT.csv\",   package = \"PvSTATEM\", mustWork = TRUE ) layout_path <- system.file(\"extdata\", \"CovidOISExPONTENT_layout.xlsx\",   package = \"PvSTATEM\", mustWork = TRUE ) plate <- read_luminex_data(path, layout_filepath = layout_path, verbose = FALSE) plot_standard_curve_analyte(plate, \"Spike_6P\", plot_legend = FALSE, data_type = \"Median\")"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_analyte_with_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot standard curve of a certain analyte with fitted model — plot_standard_curve_analyte_with_model","title":"Plot standard curve of a certain analyte with fitted model — plot_standard_curve_analyte_with_model","text":"Function plots values standard curve samples fitted model.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_analyte_with_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot standard curve of a certain analyte with fitted model — plot_standard_curve_analyte_with_model","text":"","code":"plot_standard_curve_analyte_with_model(   plate,   model,   data_type = \"Median\",   decreasing_rau_order = TRUE,   log_scale = c(\"all\"),   plot_asymptote = TRUE,   plot_test_predictions = TRUE,   plot_blank_mean = TRUE,   plot_rau_bounds = TRUE,   plot_legend = TRUE,   verbose = TRUE,   ... )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_analyte_with_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot standard curve of a certain analyte with fitted model — plot_standard_curve_analyte_with_model","text":"plate Plate object model fitted Model object, predictions want plot data_type Data type value want plot - datatype plate file. default equals Median decreasing_rau_order TRUE RAU values plotted decreasing order, TRUE default. log_scale elements plot displayed log scale. default \"\". NULL c() log scale used, \"\" c(\"RAU\", \"MFI\") elements displayed log scale. plot_asymptote TRUE asymptotes plotted, TRUE default plot_test_predictions TRUE predictions test samples plotted, TRUE default. predictions obtained extrapolation model plot_blank_mean TRUE mean blank samples plotted, TRUE default plot_rau_bounds TRUE RAU bounds plotted, TRUE default plot_legend TRUE legend plotted, TRUE default verbose TRUE prints messages, TRUE default ... Additional arguments passed predict function","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_analyte_with_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot standard curve of a certain analyte with fitted model — plot_standard_curve_analyte_with_model","text":"ggplot object plot","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_analyte_with_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot standard curve of a certain analyte with fitted model — plot_standard_curve_analyte_with_model","text":"","code":"path <- system.file(\"extdata\", \"CovidOISExPONTENT.csv\",   package = \"PvSTATEM\", mustWork = TRUE ) layout_path <- system.file(\"extdata\", \"CovidOISExPONTENT_layout.xlsx\",   package = \"PvSTATEM\", mustWork = TRUE ) plate <- read_luminex_data(path, layout_filepath = layout_path, verbose = FALSE) model <- create_standard_curve_model_analyte(plate, analyte_name = \"Spike_B16172\") plot_standard_curve_analyte_with_model(plate, model, decreasing_rau_order = FALSE) #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_stacked.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard curve stacked plot for levey-jennings report — plot_standard_curve_stacked","title":"Standard curve stacked plot for levey-jennings report — plot_standard_curve_stacked","text":"Function generates plot stacked top standard curves given analyte form list plates. plot created levey-jennings report mind, can run .","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_stacked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard curve stacked plot for levey-jennings report — plot_standard_curve_stacked","text":"","code":"plot_standard_curve_stacked(   list_of_plates,   analyte_name,   data_type = \"Median\",   decreasing_dilution_order = TRUE,   monochromatic = TRUE,   legend_type = NULL,   log_scale = c(\"all\"),   verbose = TRUE )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_stacked.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard curve stacked plot for levey-jennings report — plot_standard_curve_stacked","text":"list_of_plates list Plate objects analyte_name Name analyte standard curves want plot. data_type Data type value want plot - datatype plate file. default equals Median decreasing_dilution_order TRUE dilution values plotted decreasing order, TRUE default monochromatic TRUE color standard curves changes white (oldest) blue (newest) helps observe drift calibration device; otherwise, varied colours used, TRUE default legend_type default value NULL, legend type determined based monochromatic value. monochromatic equal TRUE legend type set date, FALSE legend type set plate_name. User can override behavior setting explicitly legend_type date plate_name. log_scale elements plot displayed log scale. default \"\". NULL c() log scale used, \"\" c(\"dilutions\", \"MFI\") elements displayed log scale. verbose TRUE prints messages, TRUE default","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_stacked.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard curve stacked plot for levey-jennings report — plot_standard_curve_stacked","text":"ggplot object plot","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_stacked.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard curve stacked plot for levey-jennings report — plot_standard_curve_stacked","text":"","code":"# creating temporary directory for the example output_dir <- tempdir(check = TRUE)  dir_with_luminex_files <- system.file(\"extdata\", \"multiplate_reallife_reduced\",   package = \"PvSTATEM\", mustWork = TRUE ) list_of_plates <- process_dir(dir_with_luminex_files,   return_plates = TRUE, format = \"xPONENT\", output_dir = output_dir ) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_1_xponent.csv #> using format xPONENT #>  #> New plate object has been created with name: IGG_CO_1_xponent! #>  #> Processing plate 'IGG_CO_1_xponent' #> Warning: The specified file /tmp/RtmpdGePL2/IGG_CO_1_xponent_RAU.csv already exists. Overwriting it. #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/tmp/RtmpdGePL2/IGG_CO_1_xponent_RAU.csv' #> Warning: The specified file /tmp/RtmpdGePL2/IGG_CO_1_xponent_nMFI.csv already exists. Overwriting it. #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/tmp/RtmpdGePL2/IGG_CO_1_xponent_nMFI.csv' #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_2_xponent.csv #> using format xPONENT #>  #> New plate object has been created with name: IGG_CO_2_xponent! #>  #> Processing plate 'IGG_CO_2_xponent' #> Warning: The specified file /tmp/RtmpdGePL2/IGG_CO_2_xponent_RAU.csv already exists. Overwriting it. #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/tmp/RtmpdGePL2/IGG_CO_2_xponent_RAU.csv' #> Warning: The specified file /tmp/RtmpdGePL2/IGG_CO_2_xponent_nMFI.csv already exists. Overwriting it. #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/tmp/RtmpdGePL2/IGG_CO_2_xponent_nMFI.csv' #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_reallife_reduced/IGG_CO_3_xponent.csv #> using format xPONENT #>  #> New plate object has been created with name: IGG_CO_3_xponent! #>  #> Processing plate 'IGG_CO_3_xponent' #> Warning: The specified file /tmp/RtmpdGePL2/IGG_CO_3_xponent_RAU.csv already exists. Overwriting it. #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/tmp/RtmpdGePL2/IGG_CO_3_xponent_RAU.csv' #> Warning: The specified file /tmp/RtmpdGePL2/IGG_CO_3_xponent_nMFI.csv already exists. Overwriting it. #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/tmp/RtmpdGePL2/IGG_CO_3_xponent_nMFI.csv' plot_standard_curve_stacked(list_of_plates, \"ME\", data_type = \"Median\", monochromatic = FALSE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_thumbnail.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard curve thumbnail for report — plot_standard_curve_thumbnail","title":"Standard curve thumbnail for report — plot_standard_curve_thumbnail","text":"Function generates thumbnail standard curve given analyte. thumbnail used plate report. additional parameters, used internally.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_thumbnail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard curve thumbnail for report — plot_standard_curve_thumbnail","text":"","code":"plot_standard_curve_thumbnail(plate, analyte_name, data_type = \"Median\")"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_thumbnail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard curve thumbnail for report — plot_standard_curve_thumbnail","text":"plate Plate object analyte_name Name analyte standard curve want plot. data_type Data type value want plot - types plate file. default equals median","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/plot_standard_curve_thumbnail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard curve thumbnail for report — plot_standard_curve_thumbnail","text":"ggplot object plot","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/predict.Model.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the RAU values from the MFI values — predict.Model","title":"Predict the RAU values from the MFI values — predict.Model","text":"details can found : Model","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/predict.Model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the RAU values from the MFI values — predict.Model","text":"","code":"# S3 method for class 'Model' predict(object, mfi, ...)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/predict.Model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the RAU values from the MFI values — predict.Model","text":"object (Model()) Object Model class mfi (numeric()) MFI values want predict RAU values scale MFI values used fit model ... Additional arguments passed method","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/predict.Model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the RAU values from the MFI values — predict.Model","text":"(data.frame())","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a dir of files to generate normalised data and reports — process_dir","title":"Process a dir of files to generate normalised data and reports — process_dir","text":"output files created alongside corresponding input files, preserving directory structure input directory unless flatten_output parameter set TRUE.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a dir of files to generate normalised data and reports — process_dir","text":"","code":"process_dir(   input_dir,   output_dir = NULL,   recurse = FALSE,   flatten_output = FALSE,   layout_filepath = NULL,   format = NULL,   normalisation_types = c(\"RAU\", \"nMFI\"),   generate_reports = FALSE,   return_plates = FALSE,   dry_run = FALSE,   verbose = TRUE,   ... )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a dir of files to generate normalised data and reports — process_dir","text":"input_dir (character(1)) directory containing input files. may nested. output_dir (character(1)) Optional overwrite directory output files saved. default NULL. default, output directory input directory. recurse (logical(1)) TRUE, function search files recursively input directory. default FALSE. flatten_output (logical(1)) TRUE, output files saved output directory directly. default FALSE. layout_filepath (character(1)) path layout file. default NULL, layout file determined automatically based file name. format (character(1)) format Luminex data. default NULL, format determined automatically based file name. Available options xPONENT INTELLIFLEX. normalisation_types (character()) vector normalisation types use. default c(\"RAU\", \"nMFI\"). generate_reports (logical(1)) TRUE, generate quality control reports file. default FALSE. return_plates (logical(1)) TRUE, return list processed plates. default FALSE. dry_run (logical(1)) TRUE, function process files print information files processed. default FALSE. verbose (logical(1)) Print additional information. default TRUE. ... Additional arguments process_file function.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a dir of files to generate normalised data and reports — process_dir","text":"return_plates parameter set TRUE function returns list plates sorted plate_datetime (time experiment noted csv file) increasing order (oldest plates first). return_plates parameters set FALSE function returns NULL.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process a dir of files to generate normalised data and reports — process_dir","text":"","code":"# Select input directory to process dir <- system.file(\"extdata\", \"multiplate_lite\", package = \"PvSTATEM\", mustWork = TRUE)  # Select output directory output_dir <- tempdir(check = TRUE)  # Process input directory and return plates plates <- process_dir(dir, return_plates = TRUE, output_dir = output_dir) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/multiplate_lite/CovidOISExPONTENT.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT! #>  #> Processing plate 'CovidOISExPONTENT' #> Fitting the models and predicting RAU for each analyte #> Warning: High dose hook detected. #>         Removing samples with dilutions above the high dose threshold. #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/tmp/RtmpdGePL2/CovidOISExPONTENT_RAU.csv' #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/tmp/RtmpdGePL2/CovidOISExPONTENT_nMFI.csv'"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a file to generate normalised data and reports — process_file","title":"Process a file to generate normalised data and reports — process_file","text":"Perform process_plate generate_plate_report given plate file. detail, function reads plate file calls process_plate processed plate objects across normalisation types, including raw MFI values. user specified generate_report flag, also call generate_plate_report function generating quality control report.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a file to generate normalised data and reports — process_file","text":"","code":"process_file(   plate_filepath,   layout_filepath,   output_dir = \"normalised_data\",   format = \"xPONENT\",   generate_report = FALSE,   normalisation_types = c(\"RAU\", \"nMFI\"),   verbose = TRUE,   ... )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a file to generate normalised data and reports — process_file","text":"plate_filepath (character(1)) path plate file. layout_filepath (character(1)) path layout file. output_dir (character(1)) directory output files saved. default \"normalised_data\". format (character(1)) format Luminex data. default \"xPONENT\". Available options \"xPONENT\" \"INTELLIFLEX\". generate_report (logical(1)) TRUE, generate quality control report. default FALSE. normalisation_types (character()) vector normalisation types use. default c(\"RAU\", \"nMFI\"). verbose (logical(1)) Print additional information. default TRUE. ... Additional arguments read_luminex_data function.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process a file to generate normalised data and reports — process_file","text":"","code":"# Select an input csv file for processing and corresponding layout file plate_file <- system.file(\"extdata\", \"CovidOISExPONTENT_CO_reduced.csv\", package = \"PvSTATEM\") layout_file <- system.file(\"extdata\", \"CovidOISExPONTENT_CO_layout.xlsx\", package = \"PvSTATEM\")  example_dir <- tempdir(check = TRUE) # a temporary directory # create and save dataframe with computed dilutions for all suported noramlization types process_file(plate_file, layout_file, output_dir = example_dir) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT_CO_reduced.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT_CO_reduced! #>  #> Processing plate 'CovidOISExPONTENT_CO_reduced' #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/tmp/RtmpdGePL2/CovidOISExPONTENT_CO_reduced_RAU.csv' #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/tmp/RtmpdGePL2/CovidOISExPONTENT_CO_reduced_nMFI.csv' #> Plate with 49 samples and 2 analytes  example_dir2 <- tempdir(check = TRUE) # a temporary directory # process the plate for a specific normalization type process_file(plate_file, layout_file, output_dir = example_dir2, normalisation_types = c(\"RAU\")) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT_CO_reduced.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT_CO_reduced! #>  #> Processing plate 'CovidOISExPONTENT_CO_reduced' #> Warning: The specified file /tmp/RtmpdGePL2/CovidOISExPONTENT_CO_reduced_RAU.csv already exists. Overwriting it. #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/tmp/RtmpdGePL2/CovidOISExPONTENT_CO_reduced_RAU.csv' #> Plate with 49 samples and 2 analytes"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a plate and save output values to a CSV — process_plate","title":"Process a plate and save output values to a CSV — process_plate","text":"Depending normalisation_type argument, function compute RAU nMFI values analyte plate. RAU default normalisation type. behaviour function, case RAU normalisation type, can summarised follows: Adjust blanks already done. Fit model analyte using standard curve samples. Compute RAU values analyte using corresponding model. Aggregate computed RAU values single data frame. Save computed RAU values CSV file. info RAU normalisation can found create_standard_curve_model_analyte function documentation create_standard_curve_model_analyte Model reference Model. case normalisation type nMFI, function : Adjust blanks already done. Compute nMFI values analyte using target dilution. Aggregate computed nMFI values single data frame. Save computed nMFI values CSV file. info nMFI normalisation can found get_nmfi function documentation get_nmfi.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a plate and save output values to a CSV — process_plate","text":"","code":"process_plate(   plate,   filename = NULL,   output_dir = \"normalised_data\",   normalisation_type = \"RAU\",   data_type = \"Median\",   include_raw_mfi = TRUE,   adjust_blanks = FALSE,   verbose = TRUE,   reference_dilution = 1/400,   ... )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a plate and save output values to a CSV — process_plate","text":"plate (Plate()) plate object filename (character(1)) name output CSV file normalised MFI values. provided equals NULL, output filename based normalisation type plate name, precisely: {plate_name}_{normalisation_type}.csv. default plate_name filename input file contains plate data. details please refer Plate. passed filename contain .csv extension, default extension .csv added. Filename can also path file, e.g. path//file.csv. case, output_dir filename joined together. However, passed filepath absolute path output_dir parameter also provided, output_dir parameter ignored. file already exists specified filepath, function overwrite . output_dir (character(1)) directory output CSV file saved. Please note directory path provided create necessary directories (including parent directories) exist. equals NULL current working directory used. Default 'normalised_data'. normalisation_type (character(1)) type normalisation use. Available options : c(RAU, nMFI). data_type (character(1)) type data use computation. Median default include_raw_mfi (logical(1)) include raw MFI values output. default TRUE. case option TRUE, output dataframe contains two columns analyte: one normalised values one raw MFI values. normalised columns named AnalyteName AnalyteName_raw, respectively. adjust_blanks (logical(1)) adjust blanks computing RAU values. default FALSE verbose (logical(1)) print additional information. default TRUE reference_dilution (numeric(1)) target dilution use reference nMFI normalisation. Ignored case RAU normalisation. Default 1/400. refer dilution standard curve sample given plate object. parameter either numeric value string. case character string, format 1/d+, d+ positive integer. ... Additional arguments passed fit model function (create_standard_curve_model_analyte)","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a plate and save output values to a CSV — process_plate","text":"data frame normalised values","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/process_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process a plate and save output values to a CSV — process_plate","text":"","code":"plate_file <- system.file(\"extdata\", \"CovidOISExPONTENT_CO_reduced.csv\", package = \"PvSTATEM\") # a plate file with reduced number of analytes to speed up the computation layout_file <- system.file(\"extdata\", \"CovidOISExPONTENT_CO_layout.xlsx\", package = \"PvSTATEM\")  plate <- read_luminex_data(plate_file, layout_file, verbose = FALSE)  example_dir <- tempdir(check = TRUE) # a temporary directory # create and save dataframe with computed dilutions process_plate(plate, output_dir = example_dir) #> Warning: The specified file /tmp/RtmpdGePL2/CovidOISExPONTENT_CO_reduced_RAU.csv already exists. Overwriting it. #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/tmp/RtmpdGePL2/CovidOISExPONTENT_CO_reduced_RAU.csv' #>         Spike_6P_IPP      ME_NA Spike_6P_IPP_raw ME_NA_raw #> K086-LM   3292.26101  2128.6098           4658.5     365.5 #> M254-VM     85.38753  5496.4318            209.5     814.0 #> M199-DS   2841.64505  7169.3408           4180.0     993.0 #> M164-LM    125.42694  3560.9584            287.5     572.0 #> M265-MM    396.34769  3783.9004            784.0     602.0 #> K026-DJ     85.13506  1430.5461            209.0     257.0 #> K137-DT   3142.28223  6567.6666           4503.0     931.5 #> M255-VA     38.78304  1103.7202            114.0     205.0 #> M258-PA     52.98592  2174.6786            144.0     372.5 #> M188-VC   1137.87727  1877.6962           1992.5     327.0 #> M270-BF     58.80200   875.6587            156.0     168.5 #> M050-EL    100.64396  2168.0885            239.5     371.5 #> M088-GE    145.30638  2892.0240            325.5     478.5 #> M259-PM   1082.02893  8614.0967           1908.0    1129.0 #> K101-PA     73.84503  1777.7663            186.5     311.5 #> M189-VY    511.61479  2562.3316            985.0     430.5 #> K018-FC    882.55266  2250.6828           1598.0     384.0 #> M142-RA     54.43368   966.1990            147.0     183.0 #> K100-CC     42.98563   984.9380            123.0     186.0 #> K107-RP     32.36841  1138.1493            100.0     210.5 #> M240-HS     31.46594  1028.6766             98.0     193.0 #> K019-FM     83.62164  1589.0900            206.0     282.0 #> M148-PS     61.97864  1216.4977            162.5     223.0 #> M089-HG   4677.61877  7712.7546           5944.0    1046.0 #> K136-DA  20000.00000 17238.7897          14414.0    1706.0 #> M241-HR   5532.92911  1279.2952           6626.0     233.0 #> K020-NA  12680.55047  9631.3814          10465.0    1216.0 #> M239-HJ     40.41069  2654.1971            117.5     444.0 #> M092-LS    164.84476  3102.6112            362.5     508.5 #> M162-PE   4972.48078  5738.5101           6187.5     841.5 #> M260-PM  20000.00000  2370.4746          14657.5     402.0 #> K021-FS     28.78211   635.1388             92.0     130.0 #> M253-VM     80.35078  1235.3249            199.5     226.0 #> M198-CN     60.26598  2056.5039            159.0     354.5 #> M163-PD   3780.09488  6970.3730           5140.5     973.0 #> M264-MA  20000.00000  2197.7678          19919.0     376.0 #> K024-DT    981.88707  2867.6895           1754.0     475.0  # process plate without adjusting blanks and save the output to a file with a custom name process_plate(plate,   filename = \"plate_without_blanks_adjusted.csv\",   output_dir = example_dir, adjust_blanks = FALSE ) #> Fitting the models and predicting RAU for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed RAU values to a CSV file located in: '/tmp/RtmpdGePL2/plate_without_blanks_adjusted.csv' #>         Spike_6P_IPP      ME_NA Spike_6P_IPP_raw ME_NA_raw #> K086-LM   3292.26101  2128.6098           4658.5     365.5 #> M254-VM     85.38753  5496.4318            209.5     814.0 #> M199-DS   2841.64505  7169.3408           4180.0     993.0 #> M164-LM    125.42694  3560.9584            287.5     572.0 #> M265-MM    396.34769  3783.9004            784.0     602.0 #> K026-DJ     85.13506  1430.5461            209.0     257.0 #> K137-DT   3142.28223  6567.6666           4503.0     931.5 #> M255-VA     38.78304  1103.7202            114.0     205.0 #> M258-PA     52.98592  2174.6786            144.0     372.5 #> M188-VC   1137.87727  1877.6962           1992.5     327.0 #> M270-BF     58.80200   875.6587            156.0     168.5 #> M050-EL    100.64396  2168.0885            239.5     371.5 #> M088-GE    145.30638  2892.0240            325.5     478.5 #> M259-PM   1082.02893  8614.0967           1908.0    1129.0 #> K101-PA     73.84503  1777.7663            186.5     311.5 #> M189-VY    511.61479  2562.3316            985.0     430.5 #> K018-FC    882.55266  2250.6828           1598.0     384.0 #> M142-RA     54.43368   966.1990            147.0     183.0 #> K100-CC     42.98563   984.9380            123.0     186.0 #> K107-RP     32.36841  1138.1493            100.0     210.5 #> M240-HS     31.46594  1028.6766             98.0     193.0 #> K019-FM     83.62164  1589.0900            206.0     282.0 #> M148-PS     61.97864  1216.4977            162.5     223.0 #> M089-HG   4677.61877  7712.7546           5944.0    1046.0 #> K136-DA  20000.00000 17238.7897          14414.0    1706.0 #> M241-HR   5532.92911  1279.2952           6626.0     233.0 #> K020-NA  12680.55047  9631.3814          10465.0    1216.0 #> M239-HJ     40.41069  2654.1971            117.5     444.0 #> M092-LS    164.84476  3102.6112            362.5     508.5 #> M162-PE   4972.48078  5738.5101           6187.5     841.5 #> M260-PM  20000.00000  2370.4746          14657.5     402.0 #> K021-FS     28.78211   635.1388             92.0     130.0 #> M253-VM     80.35078  1235.3249            199.5     226.0 #> M198-CN     60.26598  2056.5039            159.0     354.5 #> M163-PD   3780.09488  6970.3730           5140.5     973.0 #> M264-MA  20000.00000  2197.7678          19919.0     376.0 #> K024-DT    981.88707  2867.6895           1754.0     475.0   # nMFI normalisation process_plate(plate,   output_dir = example_dir,   normalisation_type = \"nMFI\", reference_dilution = 1 / 400 ) #> Warning: The specified file /tmp/RtmpdGePL2/CovidOISExPONTENT_CO_reduced_nMFI.csv already exists. Overwriting it. #> Computing nMFI values for each analyte #> Adding the raw MFI values to the output dataframe #> Saving the computed nMFI values to a CSV file located in: '/tmp/RtmpdGePL2/CovidOISExPONTENT_CO_reduced_nMFI.csv' #>         Spike_6P_IPP     ME_NA Spike_6P_IPP_raw ME_NA_raw #> K086-LM   1.32720798 0.9407979           4658.5     365.5 #> M254-VM   0.05968661 2.0952381            209.5     814.0 #> M199-DS   1.19088319 2.5559846           4180.0     993.0 #> M164-LM   0.08190883 1.4723295            287.5     572.0 #> M265-MM   0.22336182 1.5495495            784.0     602.0 #> K026-DJ   0.05954416 0.6615187            209.0     257.0 #> K137-DT   1.28290598 2.3976834           4503.0     931.5 #> M255-VA   0.03247863 0.5276705            114.0     205.0 #> M258-PA   0.04102564 0.9588160            144.0     372.5 #> M188-VC   0.56766382 0.8416988           1992.5     327.0 #> M270-BF   0.04444444 0.4337194            156.0     168.5 #> M050-EL   0.06823362 0.9562420            239.5     371.5 #> M088-GE   0.09273504 1.2316602            325.5     478.5 #> M259-PM   0.54358974 2.9060489           1908.0    1129.0 #> K101-PA   0.05313390 0.8018018            186.5     311.5 #> M189-VY   0.28062678 1.1081081            985.0     430.5 #> K018-FC   0.45527066 0.9884170           1598.0     384.0 #> M142-RA   0.04188034 0.4710425            147.0     183.0 #> K100-CC   0.03504274 0.4787645            123.0     186.0 #> K107-RP   0.02849003 0.5418275            100.0     210.5 #> M240-HS   0.02792023 0.4967825             98.0     193.0 #> K019-FM   0.05868946 0.7258687            206.0     282.0 #> M148-PS   0.04629630 0.5740026            162.5     223.0 #> M089-HG   1.69344729 2.6924067           5944.0    1046.0 #> K136-DA   4.10655271 4.3912484          14414.0    1706.0 #> M241-HR   1.88774929 0.5997426           6626.0     233.0 #> K020-NA   2.98148148 3.1299871          10465.0    1216.0 #> M239-HJ   0.03347578 1.1428571            117.5     444.0 #> M092-LS   0.10327635 1.3088803            362.5     508.5 #> M162-PE   1.76282051 2.1660232           6187.5     841.5 #> M260-PM   4.17592593 1.0347490          14657.5     402.0 #> K021-FS   0.02621083 0.3346203             92.0     130.0 #> M253-VM   0.05683761 0.5817246            199.5     226.0 #> M198-CN   0.04529915 0.9124839            159.0     354.5 #> M163-PD   1.46452991 2.5045045           5140.5     973.0 #> M264-MA   5.67492877 0.9678250          19919.0     376.0 #> K024-DT   0.49971510 1.2226512           1754.0     475.0"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_intelliflex_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the Intelliflex format data — read_intelliflex_format","title":"Read the Intelliflex format data — read_intelliflex_format","text":"Read Intelliflex format data","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_intelliflex_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the Intelliflex format data — read_intelliflex_format","text":"","code":"read_intelliflex_format(path, verbose = TRUE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_intelliflex_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the Intelliflex format data — read_intelliflex_format","text":"path Path INTELLIFLEX file verbose Print additional information. Default TRUE","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_layout_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read layout data from a file — read_layout_data","title":"Read layout data from a file — read_layout_data","text":"Read layout data file","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_layout_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read layout data from a file — read_layout_data","text":"","code":"read_layout_data(layout_file_path, ...)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_layout_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read layout data from a file — read_layout_data","text":"layout_file_path Path layout file ... Additional arguments pass underlying read function","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_layout_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read layout data from a file — read_layout_data","text":"matrix layout data. row names supposed letters ,B,C, etc. column names supposed numbers 1,2,3, etc.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_luminex_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Luminex Data — read_luminex_data","title":"Read Luminex Data — read_luminex_data","text":"Reads file containing Luminex data returns Plate object. provided, can also read layout file, usually contains information sample names, sample types dilutions. function capable reading data two different formats: xPONENT INTELLIFLEX produced two different Luminex machines.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_luminex_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Luminex Data — read_luminex_data","text":"","code":"read_luminex_data(   plate_filepath,   layout_filepath = NULL,   format = \"xPONENT\",   plate_file_separator = \",\",   plate_file_encoding = \"UTF-8\",   use_layout_sample_names = TRUE,   use_layout_types = TRUE,   use_layout_dilutions = TRUE,   default_data_type = \"Median\",   sample_types = NULL,   dilutions = NULL,   verbose = TRUE )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_luminex_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Luminex Data — read_luminex_data","text":"plate_filepath Path Luminex plate file layout_filepath Path Luminex layout file format format Luminex data. Select : xPONENT, INTELLIFLEX plate_file_separator separator used plate file plate_file_encoding encoding used plate file use_layout_sample_names Whether use names layout file extracting sample names. use_layout_types Whether use names layout file extracting sample types. Works layout file provided use_layout_dilutions Whether use dilutions layout file extracting dilutions. Works layout file provided default_data_type default data type use none specified sample_types vector sample types use instead extracted ones dilutions vector dilutions use instead extracted ones verbose Whether print additional information warnings. TRUE default","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_luminex_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Luminex Data — read_luminex_data","text":"Plate file containing Luminex data","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_luminex_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Luminex Data — read_luminex_data","text":"","code":"plate_file <- system.file(\"extdata\", \"CovidOISExPONTENT.csv\", package = \"PvSTATEM\") layout_file <- system.file(\"extdata\", \"CovidOISExPONTENT_layout.csv\", package = \"PvSTATEM\") plate <- read_luminex_data(plate_file, layout_file) #> Reading Luminex data from: /home/runner/work/_temp/Library/PvSTATEM/extdata/CovidOISExPONTENT.csv #> using format xPONENT #>  #> New plate object has been created with name: CovidOISExPONTENT! #>   plate_file <- system.file(\"extdata\", \"CovidOISExPONTENT_CO.csv\", package = \"PvSTATEM\") layout_file <- system.file(\"extdata\", \"CovidOISExPONTENT_CO_layout.xlsx\", package = \"PvSTATEM\") # To suppress warnings and additional information use verbose = FALSE plate <- read_luminex_data(plate_file, layout_file, verbose = FALSE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_xponent_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the xPONENT format data — read_xponent_format","title":"Read the xPONENT format data — read_xponent_format","text":"Read xPONENT format data","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_xponent_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the xPONENT format data — read_xponent_format","text":"","code":"read_xponent_format(   path,   exact_parse = FALSE,   encoding = \"utf-8\",   separator = \",\",   verbose = TRUE )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/read_xponent_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the xPONENT format data — read_xponent_format","text":"path Path xPONENT file exact_parse Whether parse file exactly Exact parsing means batch, calibration assay metadata parsed well encoding Encoding file separator Separator CSV values verbose Whether print progress. Default TRUE","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/remove_empty_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Empty Lists from a List — remove_empty_lists","title":"Remove Empty Lists from a List — remove_empty_lists","text":"internal function filters elements list empty lists.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/remove_empty_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Empty Lists from a List — remove_empty_lists","text":"","code":"remove_empty_lists(lst)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/remove_empty_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Empty Lists from a List — remove_empty_lists","text":"lst list processed.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/remove_empty_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Empty Lists from a List — remove_empty_lists","text":"list empty lists removed.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/sort_list_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort a flat list by value — sort_list_by","title":"Sort a flat list by value — sort_list_by","text":"Sort flat list value","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/sort_list_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort a flat list by value — sort_list_by","text":"","code":"sort_list_by(list_obj, decreasing = FALSE, value_f = function(elem) elem)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/sort_list_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort a flat list by value — sort_list_by","text":"list_obj list sort decreasing sorting decreasing increasing value_f Function expects element list returns value sort list .","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/translate_sample_names_to_sample_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate sample names to sample types — translate_sample_names_to_sample_types","title":"Translate sample names to sample types — translate_sample_names_to_sample_types","text":"Function translates sample names sample types based sample name Luminex file sample name layout file, may provided. function uses regular expressions match sample names sample types. parses names follows: sample_names sample_names_from_layout equals BLANK, BACKGROUND B, SampleType equals BLANK sample_names sample_names_from_layout equals STANDARD CURVE, SC, S, contains substring 1/\\d+ prefix  , S_, S , S CP3, SampleType equals STANDARD CURVE sample_names sample_names_from_layout equals NEGATIVE CONTROL, N, contains substring NEG, SampleType equals NEGATIVE CONTROL sample_names sample_names_from_layout starts P followed whitespace, POS followed whitespace, sample name followed substring 1/\\d+ SampleType equals POSITIVE CONTROL Otherwise, returned SampleType TEST","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/translate_sample_names_to_sample_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate sample names to sample types — translate_sample_names_to_sample_types","text":"","code":"translate_sample_names_to_sample_types(   sample_names,   sample_names_from_layout = NULL )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/translate_sample_names_to_sample_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate sample names to sample types — translate_sample_names_to_sample_types","text":"sample_names (character()) Vector sample names Luminex file sample_names_from_layout (character()) Vector sample names Layout file values vector may different sample_names may contain additional information sample type like dilution. vector set least length sample_names.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/translate_sample_names_to_sample_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate sample names to sample types — translate_sample_names_to_sample_types","text":"vector valid sample_type strings length equal length sample_names","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/translate_sample_names_to_sample_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate sample names to sample types — translate_sample_names_to_sample_types","text":"","code":"translate_sample_names_to_sample_types(c(\"B\", \"BLANK\", \"NEG\", \"TEST1\")) #> [1] \"BLANK\"            \"BLANK\"            \"NEGATIVE CONTROL\" \"TEST\"             translate_sample_names_to_sample_types(c(\"S\", \"CP3\")) #> [1] \"STANDARD CURVE\" \"TEST\""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/validate_filepath_and_output_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate filepath and output_dir — validate_filepath_and_output_dir","title":"Validate filepath and output_dir — validate_filepath_and_output_dir","text":"function validates filepath output_dir arguments.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/validate_filepath_and_output_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate filepath and output_dir — validate_filepath_and_output_dir","text":"","code":"validate_filepath_and_output_dir(   filename,   output_dir,   plate_name,   suffix,   extension,   verbose = TRUE )"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/validate_filepath_and_output_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate filepath and output_dir — validate_filepath_and_output_dir","text":"filename (character(1)) path file. output_dir (character(1)) directory file saved. plate_name (character(1)) name plate. suffix (character(1)) suffix added filename provided, e.g. RAU. extension (character(1)) extension added filename one. Passed without dot, e.g. csv. verbose (logical(1)) logical value indicating whether function print additional information.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/validate_filepath_and_output_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate filepath and output_dir — validate_filepath_and_output_dir","text":"absolute output path.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/verbose_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Verbose Cat — verbose_cat","title":"Verbose Cat — verbose_cat","text":"function prints input console verbose argument TRUE.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/verbose_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verbose Cat — verbose_cat","text":"","code":"verbose_cat(..., verbose = TRUE)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/verbose_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verbose Cat — verbose_cat","text":"... input printed. verbose logical value indicating whether input printed.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/verify_character_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify Character Join — verify_character_join","title":"Verify Character Join — verify_character_join","text":"Checks two character values equal. either value NULL, returns TRUE.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/verify_character_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify Character Join — verify_character_join","text":"","code":"verify_character_join(x, y)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/verify_character_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify Character Join — verify_character_join","text":"x character value compared. y character value compared.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/verify_character_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify Character Join — verify_character_join","text":"TRUE values equal either value NULL. Returns FALSE otherwise.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/verify_numeric_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify Numeric Join — verify_numeric_join","title":"Verify Numeric Join — verify_numeric_join","text":"Checks two numeric values equal. either value NA, returns TRUE.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/verify_numeric_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify Numeric Join — verify_numeric_join","text":"","code":"verify_numeric_join(x, y)"},{"path":"https://mini-pw.github.io/PvSTATEM/reference/verify_numeric_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify Numeric Join — verify_numeric_join","text":"x numeric value compared. y numeric value compared.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/reference/verify_numeric_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify Numeric Join — verify_numeric_join","text":"TRUE values equal either value NA. Returns FALSE otherwise.","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/news/index.html","id":"pvstatem-020","dir":"Changelog","previous_headings":"","what":"PvSTATEM 0.2.0","title":"PvSTATEM 0.2.0","text":"added processing multiple plates added stacked plot, levey-jennings plot multiple plate report fixed search option documentation","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/news/index.html","id":"pvstatem-013","dir":"Changelog","previous_headings":"","what":"PvSTATEM 0.1.3","title":"PvSTATEM 0.1.3","text":"CRAN release: 2025-01-08 fixed issue writing home user’s directory fixed issue reading plate files containing empty wells middle layout added badge displaying coverage status","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/news/index.html","id":"pvstatem-012","dir":"Changelog","previous_headings":"","what":"PvSTATEM 0.1.2","title":"PvSTATEM 0.1.2","text":"CRAN release: 2024-11-08 uploaded missing vignettes removed previous release","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/news/index.html","id":"pvstatem-011","dir":"Changelog","previous_headings":"","what":"PvSTATEM 0.1.1","title":"PvSTATEM 0.1.1","text":"CRAN release: 2024-11-02 released package CRAN fixed minor formatting issues","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/news/index.html","id":"pvstatem-010","dir":"Changelog","previous_headings":"","what":"PvSTATEM 0.1.0","title":"PvSTATEM 0.1.0","text":"enhanced unified file saving generate_plate_report process_plate reduced HTML report size improved structure removed extraneous column RAU output added notes field HTML report made nplr warnings informative added vignette generate_plate_report function limited amount data frame presented vignettes","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/news/index.html","id":"pvstatem-005","dir":"Changelog","previous_headings":"","what":"PvSTATEM 0.0.5","title":"PvSTATEM 0.0.5","text":"added function generate_plate_report generating html report added nMFI normalisation type added option include raw MFI output process_plate function renamed output model RAU (Relative Antibody Unit), interpretable human simple censoring extrapolation","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/news/index.html","id":"pvstatem-004","dir":"Changelog","previous_headings":"","what":"PvSTATEM 0.0.4","title":"PvSTATEM 0.0.4","text":"CRAN release: 2024-10-03 met CRAN policy fixed issue templates added plate object view options","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/news/index.html","id":"pvstatem-003","dir":"Changelog","previous_headings":"","what":"PvSTATEM 0.0.3","title":"PvSTATEM 0.0.3","text":"refactored whole package structure simplify usage added new, much faster parser xPONENT INTELLIFLEX files model encapsulation standard curve fitting added new plots - MFI chart layout plot updated blank adjustment function error fixes","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/news/index.html","id":"pvstatem-002","dir":"Changelog","previous_headings":"","what":"PvSTATEM 0.0.2","title":"PvSTATEM 0.0.2","text":"added new datasets package sample standard curve plotting GitHub actions tests coverage calculation","code":""},{"path":"https://mini-pw.github.io/PvSTATEM/news/index.html","id":"pvstatem-001","dir":"Changelog","previous_headings":"","what":"PvSTATEM 0.0.1","title":"PvSTATEM 0.0.1","text":"initial package structure simple reading functionality","code":""}]
